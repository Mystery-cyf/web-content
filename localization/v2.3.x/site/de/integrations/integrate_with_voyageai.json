{"codeList":["import csv\nimport random\nimport voyageai\nfrom pymilvus import connections, FieldSchema, CollectionSchema, DataType, Collection, utility\n","# Extract the book titles\ndef csv_load(file):\n    with open(file, newline='') as f:\n        reader=csv.reader(f, delimiter=',')\n        for row in reader:\n            yield row[1]\n","FILE = './content/books.csv'  # Download it from https://www.kaggle.com/datasets/jealousleopard/goodreadsbooks and save it in the folder that holds your script.\nCOLLECTION_NAME = 'title_db'  # Collection name\nDIMENSION = 1024  # Embeddings size\nCOUNT = 100  # How many titles to embed and insert.\nMILVUS_HOST = 'localhost'  # Milvus server URI\nMILVUS_PORT = '19530'\nMODEL_NAME = 'voyage-law-2'  # Which model to use, please check https://docs.voyageai.com/docs/embeddings for available models\nclient = voyageai.Client(api_key=\"YOUR_VOYAGEAI_API_KEY\")\n","# Connect to Milvus\nconnections.connect(host=MILVUS_HOST, port=MILVUS_PORT)\n\n# Remove collection if it already exists\nif utility.has_collection(COLLECTION_NAME):\n    utility.drop_collection(COLLECTION_NAME)\n\n# Create collection which includes the id, title, and embedding.\nfields = [\n    FieldSchema(name='id', dtype=DataType.INT64, descrition='Ids', is_primary=True, auto_id=False),\n    FieldSchema(name='title', dtype=DataType.VARCHAR, description='Title texts', max_length=200),\n    FieldSchema(name='embedding', dtype=DataType.FLOAT_VECTOR, description='Embedding vectors', dim=DIMENSION)\n]\nschema = CollectionSchema(fields=fields, description='Title collection')\ncollection = Collection(name=COLLECTION_NAME, schema=schema)\n\n# Create an index for the collection.\n# Create an index for the collection.\nindex_params = {\n    'index_type': 'IVF_FLAT',\n    'metric_type': 'L2',\n    'params': {'nlist': 1024}\n}\ncollection.create_index(field_name=\"embedding\", index_params=index_params)\n","# Extract embedding from text using VoyageAI\ndef embed(text):\n    response = client.embed(\n        texts=[text],\n        model=MODEL_NAME,\n        truncation=False\n    )\n    return response.embeddings[0]\n\n\n# Insert each title and its embedding\nfor idx, text in enumerate(random.sample(sorted(csv_load(FILE)), k=COUNT)):  # Load COUNT amount of random values from dataset\n    ins=[[idx], [text], [embed(text)]]  # Insert the title id, the title text, and the title embedding vector\n    collection.insert(ins)\n","# Load the collection into memory for searching\ncollection.load()\n\n# Search the database based on input text\ndef search(text):\n    # Search parameters for the index\n    search_params={\n        \"metric_type\": \"L2\"\n    }\n\n    results=collection.search(\n        data=[embed(text)],  # Embeded search value\n        anns_field=\"embedding\",  # Search across embeddings\n        param=search_params,\n        limit=5,  # Limit to five results per search\n        output_fields=['title']  # Include title field in result\n    )\n\n    ret=[]\n    for hit in results[0]:\n        row=[]\n        row.extend([hit.id, hit.score, hit.entity.get('title')])  # Get the id, distance, and title for the results\n        ret.append(row)\n    return ret\n\nsearch_terms=['self-improvement', 'landscape']\n\nfor x in search_terms:\n    print('Search term:', x)\n    for result in search(x):\n        print(result)\n    print()\n","Search term: self-improvement\n[39, 0.4663320779800415, \"Tomorrow's Promise\"]\n[1, 0.4680519700050354, \"A Writer's Workbook: Daily Exercises for the Writing Life\"]\n[45, 0.46855345368385315, 'The Pragmatic Programmer: From Journeyman to Master']\n[70, 0.47063353657722473, 'Saturday']\n[28, 0.4742085337638855, 'Marvels']\n\nSearch term: landscape\n[70, 0.1867476850748062, 'Saturday']\n[28, 0.38813990354537964, 'Marvels']\n[11, 0.4200461506843567, 'Henry V']\n[83, 0.4219294786453247, 'Checkpoint']\n[19, 0.42225468158721924, 'Beach Music']\n"],"headingContent":"","anchorList":[{"label":"Similarity Search with Milvus and VoyageAI","href":"Similarity-Search-with-Milvus-and-VoyageAI","type":1,"isActive":false},{"label":"Getting started","href":"Getting-started","type":2,"isActive":false},{"label":"Searching book titles with VoyageAI & Milvus","href":"Searching-book-titles-with-VoyageAI--Milvus","type":2,"isActive":false}]}