{"codeList":["import csv\nimport json\nimport random\nimport time\nfrom openai import OpenAI\nfrom pymilvus import connections, FieldSchema, CollectionSchema, DataType, Collection, utility\n","# Extract the book titles\ndef csv_load(file):\n    with open(file, newline='') as f:\n        reader=csv.reader(f, delimiter=',')\n        for row in reader:\n            yield row[1]\n","FILE = './content/books.csv'  # Download it from https://www.kaggle.com/datasets/jealousleopard/goodreadsbooks and save it in the folder that holds your script.\nCOLLECTION_NAME = 'title_db'  # Collection name\nDIMENSION = 1536  # Embeddings size\nCOUNT = 100  # How many titles to embed and insert.\nMILVUS_HOST = 'localhost'  # Milvus server URI\nMILVUS_PORT = '19530'\nOPENAI_ENGINE = 'text-embedding-3-small'  # Which engine to use, you can change it into `text-embedding-3-large` or `text-embedding-ada-002`\nclient = OpenAI()\nclient.api_key = 'sk-******'  # Use your own Open AI API Key here\n","# Connect to Milvus\nconnections.connect(host=MILVUS_HOST, port=MILVUS_PORT)\n\n# Remove collection if it already exists\nif utility.has_collection(COLLECTION_NAME):\n    utility.drop_collection(COLLECTION_NAME)\n\n# Create collection which includes the id, title, and embedding.\nfields = [\n    FieldSchema(name='id', dtype=DataType.INT64, descrition='Ids', is_primary=True, auto_id=False),\n    FieldSchema(name='title', dtype=DataType.VARCHAR, description='Title texts', max_length=200),\n    FieldSchema(name='embedding', dtype=DataType.FLOAT_VECTOR, description='Embedding vectors', dim=DIMENSION)\n]\nschema = CollectionSchema(fields=fields, description='Title collection')\ncollection = Collection(name=COLLECTION_NAME, schema=schema)\n\n# Create an index for the collection.\n# Create an index for the collection.\nindex_params = {\n    'index_type': 'IVF_FLAT',\n    'metric_type': 'L2',\n    'params': {'nlist': 1024}\n}\ncollection.create_index(field_name=\"embedding\", index_params=index_params)\n","# Extract embedding from text using OpenAI\ndef embed(text):\n    response = client.embeddings.create(\n        input=text,\n        model=OPENAI_ENGINE\n    )\n    return response.data[0].embedding\n\n# Insert each title and its embedding\nfor idx, text in enumerate(random.sample(sorted(csv_load(FILE)), k=COUNT)):  # Load COUNT amount of random values from dataset\n    ins=[[idx], [(text[:198] + '..') if len(text) > 200 else text], [embed(text)]]  # Insert the title id, the title text, and the title embedding vector\n    collection.insert(ins)\n    time.sleep(3)  # Free OpenAI account limited to 60 RPM\n","# Load the collection into memory for searching\ncollection.load()\n\n# Search the database based on input text\ndef search(text):\n    # Search parameters for the index\n    search_params={\n        \"metric_type\": \"L2\"\n    }\n\n    results=collection.search(\n        data=[embed(text)],  # Embeded search value\n        anns_field=\"embedding\",  # Search across embeddings\n        param=search_params,\n        limit=5,  # Limit to five results per search\n        output_fields=['title']  # Include title field in result\n    )\n\n    ret=[]\n    for hit in results[0]:\n        row=[]\n        row.extend([hit.id, hit.score, hit.entity.get('title')])  # Get the id, distance, and title for the results\n        ret.append(row)\n    return ret\n\nsearch_terms=['self-improvement', 'landscape']\n\nfor x in search_terms:\n    print('Search term:', x)\n    for result in search(x):\n        print(result)\n    print()\n","Search term: self-improvement\n[46, 0.37948882579803467, 'The Road Less Traveled: A New Psychology of Love  Traditional Values  and Spiritual Growth']\n[24, 0.39301538467407227, 'The Leader In You: How to Win Friends  Influence People and Succeed in a Changing World']\n[35, 0.4081816077232361, 'Think and Grow Rich: The Landmark Bestseller Now Revised and Updated for the 21st Century']\n[93, 0.4174671173095703, 'Great Expectations']\n[10, 0.41889268159866333, 'Nicomachean Ethics']\n\nSearch term: landscape\n[49, 0.3966977894306183, 'Traveller']\n[20, 0.41044068336486816, 'A Parchment of Leaves']\n[40, 0.4179283380508423, 'The Illustrated Garden Book: A New Anthology']\n[97, 0.42227691411972046, 'Monsoon Summer']\n[70, 0.42461898922920227, 'Frankenstein']\n"],"headingContent":"","anchorList":[{"label":"Similarity Search with Milvus and OpenAI","href":"Similarity-Search-with-Milvus-and-OpenAI","type":1,"isActive":false},{"label":"Getting started","href":"Getting-started","type":2,"isActive":false},{"label":"Searching book titles with OpenAI & Milvus","href":"Searching-book-titles-with-OpenAI--Milvus","type":2,"isActive":false}]}