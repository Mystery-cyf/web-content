{"codeList":["from pymilvus import Partition\npartition = Partition(\"novel\")       # Get an existing partition.\npartition.release()\n","await milvusClient.releasePartitions({\n    collection_name: \"book\",\n    partition_names: [\"novel\"],\n });\n","err := milvusClient.ReleasePartitions(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  []string{\"novel\"},      // partitionNames\n)\nif err != nil {\n  log.Fatal(\"failed to release partitions:\", err.Error())\n}\n","List<String> partitionNames = new ArrayList<>();\npartitionNames.add(\"novel\");\nmilvusClient.releasePartitions(\n  ReleasePartitionsParam.newBuilder()\n    .withCollectionName(\"book\")\n    .withPartitionNames(partitionNames)\n    .build()\n);\n","release -c book -p novel\n","curl -X 'DELETE' \\\n  'http://localhost:9091/api/v1/partitions/load' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"book\",\n    \"partition_names\": [\"novel\"],\n    \"replica_number\": 1\n  }'\n"],"headingContent":"","anchorList":[{"label":"Release a Partition","href":"Release-a-Partition","type":1,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}