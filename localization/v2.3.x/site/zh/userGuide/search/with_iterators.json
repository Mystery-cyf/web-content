{"codeList":["from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.load()\n","await milvusClient.loadCollection({\n  collection_name: \"book\",\n});\n","err := milvusClient.LoadCollection(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  false                   // async\n)\nif err != nil {\n  log.Fatal(\"failed to load collection:\", err.Error())\n}\n","milvusClient.loadCollection(\n  LoadCollectionParam.newBuilder()\n          .withCollectionName(\"book\")\n          .build()\n);\n","load -c book\n","curl -X 'POST' \\\n  'http://localhost:9091/api/v1/collection/load' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"book\"\n  }'\n","# filter books with the number of pages ranging from 600 to 700\nexpr = \"600 <= num_pages <= 700\"\n\n# return `bookID` and `authors`\noutput_fields=[bookID, authors]\n\n# return 10 results per page and 100 results totally\nbatch_size = 10\nlimit = 100\n\n# create a query iterator\nquery_iterator = collection.query_iterator(batch_size, limit, expr, output_fields)\n\nwhile True:\n    # turn to the next page\n    res = query_iterator.next()\n    if len(res) == 0:\n        print(\"query iteration finished, close\")\n        # close the iterator\n        query_iterator.close()\n        break\n    for i in range(len(res)):\n        print(res[i])\n","vectors_to_search = rng.random((SEARCH_NQ, DIM))\n\nsearch_params = {\n    \"metric_type\": \"L2\",\n    \"params\": {\"nprobe\": 10, \"radius\": 1.0, \"range_filter\": 0.7},\n}\n\n# create a search iterator\nsearch_iterator = collection.search_iterator(\n    data=vectors_to_search,\n    anns_field=\"vector_field\",\n    param=search_params,\n    batch_size=10,\n    limit=100,\n    expr=\"600 <= num_pages <= 700\",\n    output_fields=[\"bookID\", \"authors\"]\n)\n                                             \nwhile True:\n    # turn to the next page\n    res = search_iterator.next()\n    if len(res[0]) == 0:\n        print(\"search iteration finished, close\")\n        # close the iterator\n        search_iterator.close()\n        break\n    for i in range(len(res[0])):\n        print(res[0][i])\n"],"headingContent":"","anchorList":[{"label":"Conduct a Query With Iterators","href":"Conduct-a-Query-With-Iterators","type":1,"isActive":false},{"label":"Load collection","href":"Load-collection","type":2,"isActive":false},{"label":"Query with iterator","href":"Query-with-iterator","type":2,"isActive":false},{"label":"Search with iterator","href":"Search-with-iterator","type":2,"isActive":false},{"label":"Parameters","href":"Parameters","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}