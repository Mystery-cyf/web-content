{"codeList":["pip install milvus-haystack\n","import os\n\nfrom haystack import Pipeline\nfrom haystack.components.converters import MarkdownToDocument\nfrom haystack.components.embedders import SentenceTransformersDocumentEmbedder, SentenceTransformersTextEmbedder\nfrom haystack.components.preprocessors import DocumentSplitter\nfrom haystack.components.writers import DocumentWriter\n\nfrom milvus_haystack import MilvusDocumentStore\nfrom milvus_haystack.milvus_embedding_retriever import MilvusEmbeddingRetriever\n\nfile_paths = [os.path.abspath(__file__)]  # Your knowledge documents here\n\ndocument_store = MilvusDocumentStore(\n    connection_args={\n        \"host\": \"localhost\",\n        \"port\": \"19530\",\n        \"user\": \"\",\n        \"password\": \"\",\n        \"secure\": False,\n    },\n    drop_old=True,\n)\nindexing_pipeline = Pipeline()\nindexing_pipeline.add_component(\"converter\", MarkdownToDocument())\nindexing_pipeline.add_component(\"splitter\", DocumentSplitter(split_by=\"sentence\", split_length=2))\nindexing_pipeline.add_component(\"embedder\", SentenceTransformersDocumentEmbedder())\nindexing_pipeline.add_component(\"writer\", DocumentWriter(document_store))\nindexing_pipeline.connect(\"converter\", \"splitter\")\nindexing_pipeline.connect(\"splitter\", \"embedder\")\nindexing_pipeline.connect(\"embedder\", \"writer\")\nindexing_pipeline.run({\"converter\": {\"sources\": file_paths}})\n\nprint(\"Number of documents:\", document_store.count_documents())\n\n","question = \"How to install Haystack and the Milvus integration?\"\n\nretrieval_pipeline = Pipeline()\nretrieval_pipeline.add_component(\"embedder\", SentenceTransformersTextEmbedder())\nretrieval_pipeline.add_component(\"retriever\", MilvusEmbeddingRetriever(document_store=document_store, top_k=3))\nretrieval_pipeline.connect(\"embedder\", \"retriever\")\n\nretrieval_results = retrieval_pipeline.run({\"embedder\": {\"text\": question}})\n\nfor doc in retrieval_results[\"retriever\"][\"documents\"]:\n    print(doc.content)\n    print(\"-\" * 10)\n","from haystack.utils import Secret\nfrom haystack.components.embedders import SentenceTransformersTextEmbedder\nfrom haystack.components.builders import PromptBuilder\nfrom haystack.components.generators import OpenAIGenerator\n\nprompt_template = \"\"\"Answer the following query based on the provided context. If the context does\n                     not include an answer, reply with 'I don't know'.\\n\n                     Query: {{query}}\n                     Documents:\n                     {% for doc in documents %}\n                        {{ doc.content }}\n                     {% endfor %}\n                     Answer: \n                  \"\"\"\n\nrag_pipeline = Pipeline()\nrag_pipeline.add_component(\"text_embedder\", SentenceTransformersTextEmbedder())\nrag_pipeline.add_component(\"retriever\", MilvusEmbeddingRetriever(document_store=document_store, top_k=3))\nrag_pipeline.add_component(\"prompt_builder\", PromptBuilder(template=prompt_template))\nrag_pipeline.add_component(\"generator\", OpenAIGenerator(api_key=Secret.from_token(os.getenv(\"OPENAI_API_KEY\")),\n                                                        generation_kwargs={\"temperature\": 0}))\nrag_pipeline.connect(\"text_embedder.embedding\", \"retriever.query_embedding\")\nrag_pipeline.connect(\"retriever.documents\", \"prompt_builder.documents\")\nrag_pipeline.connect(\"prompt_builder\", \"generator\")\n\nresults = rag_pipeline.run(\n    {\n        \"text_embedder\": {\"text\": question},\n        \"prompt_builder\": {\"query\": question},\n    }\n)\nprint('RAG answer:', results[\"generator\"][\"replies\"][0])\n"],"headingContent":"","anchorList":[{"label":"Build Retrieval Augmented Generative System with Milvus and Haystack","href":"Build-Retrieval-Augmented-Generative-System-with-Milvus-and-Haystack","type":1,"isActive":false},{"label":"Installation","href":"Installation","type":2,"isActive":false},{"label":"Usage","href":"Usage","type":2,"isActive":false}]}