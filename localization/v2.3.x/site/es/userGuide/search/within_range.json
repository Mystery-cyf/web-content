{"codeList":["from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.load()\n","err := milvusClient.LoadCollection(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  false                   // async\n)\nif err != nil {\n  log.Fatal(\"failed to load collection:\", err.Error())\n}\n","param = {\n    # use `L2` as the metric to calculate the distance\n    \"metric_type\": \"L2\",\n    \"params\": {\n        # search for vectors with a distance smaller than 1.0\n        \"radius\": 1.0,\n        # filter out vectors with a distance smaller than or equal to 0.8\n        \"range_filter\" : 0.8\n    }\n}\n","fmt.Printf(msgFmt, \"start creating index IVF_FLAT\")\nidx, err := entity.NewIndexIvfFlat(entity.L2, 2)\nif err != nil {\n        log.Fatalf(\"failed to create ivf flat index, err: %v\", err)\n}\nif err := c.CreateIndex(ctx, collectionName, \"embeddings\", idx, false); err != nil {\n        log.Fatalf(\"failed to create index, err: %v\", err)\n}\nsp.AddRadius(1.0)\nsp.AddRangeFilter(0.8)\n","param = {\n    # use `IP` as the metric to calculate the distance\n    \"metric_type\": \"IP\",\n    \"params\": {\n        # search for vectors with a distance greater than 0.8\n        \"radius\": 0.8,\n        # filter out most similar vectors with a distance greater than or equal to 1.0\n        \"range_filter\" : 1.0\n    }\n}\n","fmt.Printf(msgFmt, \"start creating index IVF_FLAT\")\nidx, err := entity.NewIndexIvfFlat(entity.IP, 2)\nif err != nil {\n        log.Fatalf(\"failed to create ivf flat index, err: %v\", err)\n}\nif err := c.CreateIndex(ctx, collectionName, \"embeddings\", idx, false); err != nil {\n        log.Fatalf(\"failed to create index, err: %v\", err)\n}\nsp.AddRadius(0.8)\nsp.AddRangeFilter(1.0)\n","res = collection.search(\n    data=[[0.3785311281681061,0.2960498034954071]], # query vector\n    anns_field='book_intro', # vector field name\n    param=param, # search parameters defined in step 2\n    limit=5 # number of results to return\n)\n\nprint(res)\n\n# Output:\n# [\"['id: 494, distance: 0.8085046410560608, entity: {}', 'id: 108, distance: 0.8211717009544373, entity: {}', 'id: 1387, distance: 0.8252214789390564, entity: {}']\"]\n","fmt.Printf(msgFmt, \"start searcching based on vector similarity\")\n    vec2search := []entity.Vector{\n        entity.FloatVector(embeddingList[len(embeddingList)-2]),\n        entity.FloatVector(embeddingList[len(embeddingList)-1]),\n    }\n    begin := time.Now()\n    sp, _ := entity.NewIndexIvfFlatSearchParam(16)\n    sp.AddRadius(1.0)\n    sp.AddRangeFilter(0.8)\n    sRet, err := c.Search(ctx, collectionName, nil, \"\", []string{randomCol}, vec2search,\n        embeddingCol, entity.L2, topK, sp)\n    end := time.Now()\n    if err != nil {\n        log.Fatalf(\"failed to search collection, err: %v\", err)\n    }\n","res = collection.search(\n    data=[[0.8280364871025085,0.957599937915802]], # query vector\n    anns_field='book_intro', # vector field name\n    param=param, # search parameters defined in step 2\n    limit=5 # number of results to return\n)\n\nprint(res)\n\n# Output:\n# [\"['id: 455, distance: 0.9997385740280151, entity: {}', 'id: 1908, distance: 0.9995749592781067, entity: {}', 'id: 262, distance: 0.9994202852249146, entity: {}', 'id: 1475, distance: 0.9993369579315186, entity: {}', 'id: 1536, distance: 0.999295175075531, entity: {}']\"]\n","fmt.Printf(msgFmt, \"start searcching based on vector similarity\")\n    vec2search := []entity.Vector{\n        entity.FloatVector(embeddingList[len(embeddingList)-2]),\n        entity.FloatVector(embeddingList[len(embeddingList)-1]),\n    }\n    begin := time.Now()\n    sp, _ := entity.NewIndexIvfFlatSearchParam(16)\n    sp.AddRadius(0.8)\n    sp.AddRangeFilter(1.0)\n    sRet, err := c.Search(ctx, collectionName, nil, \"\", []string{randomCol}, vec2search,\n        embeddingCol, entity.IP, topK, sp)\n    end := time.Now()\n    if err != nil {\n        log.Fatalf(\"failed to search collection, err: %v\", err)\n    }\n"],"headingContent":"","anchorList":[{"label":"Conduct a Range Search","href":"Conduct-a-Range-Search","type":1,"isActive":false},{"label":"Quick steps for a range search","href":"Quick-steps-for-a-range-search","type":2,"isActive":false},{"label":"Step 1: Load collection","href":"Step-1-Load-collection","type":2,"isActive":false},{"label":"Step 2: Configure range filtering","href":"Step-2-Configure-range-filtering","type":2,"isActive":false},{"label":"Step 3: Execute the range search","href":"Step-3-Execute-the-range-search","type":2,"isActive":false},{"label":"Conclusion","href":"Conclusion","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}