{"codeList":["! python -m pip install --upgrade pymilvus langchain openai tiktoken\n","import os\n\n# 1. Set up the name of the collection to be created.\nCOLLECTION_NAME = 'doc_qa_db'\n\n# 2. Set up the dimension of the embeddings.\nDIMENSION = 768\n\n# 3. Set up the cohere api key\nOPENAI_API_KEY = \"YOUR_OPENAI_API_KEY\"\nos.environ[\"OPENAI_API_KEY\"] = OPENAI_API_KEY\n\n# 4. Set up the connection parameters for your Zilliz Cloud cluster.\nURI = 'YOUR_CLUSTER_ENDPOINT'\n\n# 5. Set up the token for your Zilliz Cloud cluster.\n# You can either use an API key or a set of cluster username and password joined by a colon.\nTOKEN = 'YOUR_CLUSTER_TOKEN'\n","from langchain.embeddings.openai import OpenAIEmbeddings\nfrom langchain.vectorstores.zilliz import Zilliz\nfrom langchain.document_loaders import WebBaseLoader\nfrom langchain.text_splitter import RecursiveCharacterTextSplitter\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.vectorstores.milvus import Milvus\nfrom langchain.schema.runnable import RunnablePassthrough\nfrom langchain.prompts import PromptTemplate\n\n# Use the WebBaseLoader to load specified web pages into documents\nloader = WebBaseLoader([\n    'https://milvus.io/docs/overview.md',\n    'https://milvus.io/docs/release_notes.md',\n    'https://milvus.io/docs/architecture_overview.md',\n    'https://milvus.io/docs/four_layers.md',\n    'https://milvus.io/docs/main_components.md',\n    'https://milvus.io/docs/data_processing.md',\n    'https://milvus.io/docs/bitset.md',\n    'https://milvus.io/docs/boolean.md',\n    'https://milvus.io/docs/consistency.md',\n    'https://milvus.io/docs/coordinator_ha.md',\n    'https://milvus.io/docs/replica.md',\n    'https://milvus.io/docs/knowhere.md',\n    'https://milvus.io/docs/schema.md',\n    'https://milvus.io/docs/dynamic_schema.md',\n    'https://milvus.io/docs/json_data_type.md',\n    'https://milvus.io/docs/metric.md',\n    'https://milvus.io/docs/partition_key.md',\n    'https://milvus.io/docs/multi_tenancy.md',\n    'https://milvus.io/docs/timestamp.md',\n    'https://milvus.io/docs/users_and_roles.md',\n    'https://milvus.io/docs/index.md',\n    'https://milvus.io/docs/disk_index.md',\n    'https://milvus.io/docs/scalar_index.md',\n    'https://milvus.io/docs/performance_faq.md',\n    'https://milvus.io/docs/product_faq.md',\n    'https://milvus.io/docs/operational_faq.md',\n    'https://milvus.io/docs/troubleshooting.md',\n])\n\ndocs = loader.load()\n\n# Split the documents into smaller chunks\ntext_splitter = RecursiveCharacterTextSplitter(chunk_size=1024, chunk_overlap=0)\nall_splits = text_splitter.split_documents(docs)\n","embeddings = OpenAIEmbeddings()\nconnection_args = { 'uri': URI, 'token': TOKEN }\n\nvector_store = Milvus(\n    embedding_function=embeddings,\n    connection_args=connection_args,\n    collection_name=COLLECTION_NAME,\n    drop_old=True,\n).from_documents(\n    all_splits,\n    embedding=embeddings,\n    collection_name=COLLECTION_NAME,\n    connection_args=connection_args,\n)\n","query = \"What are the main components of Milvus?\"\ndocs = vector_store.similarity_search(query)\n\nprint(len(docs))\n","4\n","llm = ChatOpenAI(model_name=\"gpt-3.5-turbo\", temperature=0) \nretriever = vector_store.as_retriever()\n\ntemplate = \"\"\"Use the following pieces of context to answer the question at the end. \nIf you don't know the answer, just say that you don't know, don't try to make up an answer. \nUse three sentences maximum and keep the answer as concise as possible. \nAlways say \"thanks for asking!\" at the end of the answer. \n{context}\nQuestion: {question}\nHelpful Answer:\"\"\"\nrag_prompt = PromptTemplate.from_template(template)\n\nrag_chain = (\n    {\"context\": retriever, \"question\": RunnablePassthrough()}\n    | rag_prompt\n    | llm\n)\n\nprint(rag_chain.invoke(\"Explain IVF_FLAT in Milvus.\"))\n","# Output\n#\n# content='IVF_FLAT is an index mechanism in Milvus that divides a vector space into clusters. It compares the distances between a target vector and the centers of all clusters to find the nearest clusters. Then, it compares the distances between the target vector and the vectors in the selected clusters to find the nearest vectors. IVF_FLAT demonstrates performance advantages when the number of vectors exceeds the value of nlist. Thanks for asking!'\n"],"headingContent":"","anchorList":[{"label":"Question Answering over Documents with Milvus and LangChain","href":"Question-Answering-over-Documents-with-Milvus-and-LangChain","type":1,"isActive":false},{"label":"Before you begin","href":"Before-you-begin","type":2,"isActive":false},{"label":"Global parameters","href":"Global-parameters","type":2,"isActive":false},{"label":"Prepare data","href":"Prepare-data","type":2,"isActive":false},{"label":"Ask your question","href":"Ask-your-question","type":2,"isActive":false}]}