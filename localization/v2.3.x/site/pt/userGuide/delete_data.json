{"codeList":["expr = \"book_id in [0,1]\"\n","const expr = \"book_id in [0,1]\";\n","expr := \"book_id in [0,1]\"\n","private static final String DELETE_EXPR = \"book_id in [0,1]\";\n","delete entities -c book\nThe expression to specify entities to be deletedï¼š book_id in [0,1]\n","# See the following section.\n","expr = \"word_count >= 11000\"\n","expr := \"word_count >= 11000\"\n","expr = \"book_name != Unknown\"\n","expr := \"book_name != Unknown\"\n","expr = \"book_id > 5 && word_count <= 9999\"\n","expr := \"book_id > 5 && word_count <= 9999\"\n","from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.delete(expr)\n","await milvusClient.deleteEntities({\n  collection_name: \"book\",\n  expr: expr,\n});\n","err = milvusClient.Delete(\n    context.Background(), // ctx\n    \"book\",               // collection name\n    \"\",                   // partition name\n    expr,                 // expr\n)\nif err != nil {\n    log.Fatal(\"failed to delete:\", err.Error())\n}\n","milvusClient.delete(\n  DeleteParam.newBuilder()\n    .withCollectionName(\"book\")\n    .withExpr(DELETE_EXPR)\n    .build()\n);\n","You are trying to delete the entities of collection. This action cannot be undone!\nDo you want to continue? [y/N]: y\n","curl -X 'POST' \\\n  '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/delete' \\\n  -H 'Authorization: Bearer ${TOKEN}' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n       \"collectionName\": \"collection1\",\n       \"id\": 1\n     }'\n","{\n    \"code\": 200,\n    \"data\": {}\n}\n"],"headingContent":"","anchorList":[{"label":"Delete Entities","href":"Delete-Entities","type":1,"isActive":false},{"label":"Prepare boolean expression","href":"Prepare-boolean-expression","type":2,"isActive":false},{"label":"Delete entities","href":"Delete-entities","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}