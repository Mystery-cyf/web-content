{"codeList":["import pymilvus\n\n# A resource group name should be a string of 1 to 255 characters, starting with a letter or an underscore (_) and containing only numbers, letters, and underscores (_).\nname = \"rg\"\n\ntry:\n    utility.create_resource_group(name, using='default')\n    print(f\"Succeeded in creating resource group {name}.\")\nexcept Exception:\n    print(\"Failed to create the resource group.\")\n\n# Succeeded in creating resource group rg.\n","rgs = utility.list_resource_groups(using='default')\nprint(f\"Resource group list: {rgs}\")\n\n# Resource group list: ['__default_resource_group', 'rg']\n","info = utility.describe_resource_group(name, using=\"default\")\nprint(f\"Resource group description: {info}\")\n\n# Resource group description: \n#        <name:\"rg\">,           // string, rg name\n#        <capacity:1>,            // int, num_node which has been transfer to this rg\n#        <num_available_node:0>,  // int, available node_num, some node may shutdown\n#        <num_loaded_replica:{}>, // map[string]int, from collection_name to loaded replica of each collecion in this rg\n#        <num_outgoing_node:{}>,  // map[string]int, from collection_name to outgoging accessed node num by replica loaded in this rg \n#        <num_incoming_node:{}>.  // map[string]int, from collection_name to incoming accessed node num by replica loaded in other rg\n","source = '__default_resource_group'\ntarget = 'rg'\nnum_nodes = 1\n\ntry:\n    utility.transfer_node(source, target, num_nodes, using=\"default\")\n    print(f\"Succeeded in moving {num_node} node(s) from {source} to {target}.\")\nexcept Exception:\n    print(\"Something went wrong while moving nodes.\")\n\n# Succeeded in moving 1 node(s) from __default_resource_group to rg.\n","from pymilvus import Collection\n\ncollection = Collection('demo')\n\n# Milvus loads the collection to the default resource group.\ncollection.load(replica_number=2)\n\n# Or, you can ask Milvus load the collection to the desired resource group.\n# make sure that query nodes num should be greater or equal to replica_number\nresource_groups = ['rg']\ncollection.load(replica_number=2, _resource_group=resource_groups) \n","collection = Collection(\"Books\")\n\n# Use the load method of a collection to load one of its partition\ncollection.load([\"Novels\"], replica_number=2, _resource_group=resource_groups)\n\n# Or, you can use the load method of a partition directly\npartition = Partition(collection, \"Novels\")\npartition.load(replica_number=2, _resource_group=resource_groups)\n","source = '__default_resource_group'\ntarget = 'rg'\ncollection_name = 'c'\nnum_replicas = 1\n\ntry:\n    utility.transfer_replica(source, target, collection_name, num_replicas, using=\"default\")\n    print(f\"Succeeded in moving {num_node} replica(s) of {collection_name} from {source} to {target}.\")\nexcept Exception:\n    print(\"Something went wrong while moving replicas.\")\n\n# Succeeded in moving 1 replica(s) of c from __default_resource_group to rg.\n","source = 'rg'\ntarget = '__default_resource_group'\nnum_nodes = 1\n\ntry:\n    utility.transfer_node(source, target, num_nodes, using=\"default\")\n    utility.drop_resource_group(source, using=\"default\")\n    print(f\"Succeeded in dropping {source}.\")\nexcept Exception:\n    print(f\"Something went wrong while dropping {source}.\")\n"],"headingContent":"","anchorList":[{"label":"Manage Resource Groups","href":"Manage-Resource-Groups","type":1,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}