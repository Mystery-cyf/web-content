{"codeList":["from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.load()\n","await milvusClient.loadCollection({\n  collection_name: \"book\",\n});\n","err := milvusClient.LoadCollection(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  false                   // async\n)\nif err != nil {\n  log.Fatal(\"failed to load collection:\", err.Error())\n}\n","milvusClient.loadCollection(\n  LoadCollectionParam.newBuilder()\n          .withCollectionName(\"book\")\n          .build()\n);\n","var collection = milvusClient.GetCollection(\"book\").LoadAsync();\n","search_params = {\n    \"metric_type\": \"L2\", \n    \"offset\": 5, \n    \"ignore_growing\": False, \n    \"params\": {\"nprobe\": 10}\n}\n","const searchParams = {\n    params: { nprobe: 1024 }\n};\n","sp, _ := entity.NewIndexIvfFlatSearchParam( // NewIndex*SearchParam func\n    10,                                  // searchParam\n)\n\nopt := client.SearchQueryOptionFunc(func(option *client.SearchQueryOption) {\n    option.Limit = 3\n    option.Offset = 0\n    option.ConsistencyLevel = entity.ClStrong\n    option.IgnoreGrowing = false\n})\n","final Integer SEARCH_K = 2;                       // TopK\nfinal String SEARCH_PARAM = \"{\\\"nprobe\\\":10, \\\"offset\\\":5}\";    // Params\n","var parameters = new SearchParameters\n{\n    OutputFields = { \"title\" },\n    ConsistencyLevel = ConsistencyLevel.Strong,\n    Offset = 5,\n    ExtraParameters = { [\"nprobe\"] = \"1024\" }\n};\n","# Search entities based on a given vector.\ncurl --request POST \\\n     --url '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/search' \\\n     --header 'Authorization: Bearer <TOKEN>' \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json'\n     -d '{\n        \"collectionName\": \"collection1\",\n        \"vector\": [0.0128121, 0.029119, .... , 0.09121]\n      }'\n\n# Search entities and return specific fields.\ncurl --request POST \\\n     --url '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/search' \\\n     --header 'Authorization: Bearer <TOKEN>' \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json'\n     -d '{\n       \"collectionName\": \"collection1\",\n       \"outputFields\": [\"id\", \"name\", \"feature\", \"distance\"],\n       \"vector\": [0.0128121, 0.029119, .... , 0.09121],\n       \"filter\": \"id in (1, 2, 3)\",\n       \"limit\": 100,\n       \"offset\": 0\n     }'\n","{\n    \"code\": 200,\n    \"data\": {}\n}\n","results = collection.search(\n    data=[[0.1, 0.2]], \n    anns_field=\"book_intro\", \n    # the sum of `offset` in `param` and `limit` \n    # should be less than 16384.\n    param=search_params,\n    limit=10,\n    expr=None,\n    # set the names of the fields you want to \n    # retrieve from the search result.\n    output_fields=['title'],\n    consistency_level=\"Strong\"\n)\n\n# get the IDs of all returned hits\nresults[0].ids\n\n# get the distances to the query vector from all returned hits\nresults[0].distances\n\n# get the value of an output field specified in the search request.\nhit = results[0][0]\nhit.entity.get('title')\n","const results = await milvusClient.search({\n    collection_name: \"book\",\n    vector: [0.1, 0.2],\n    filter: null,\n    // the sum of `limit` and `offset` should be less than 16384.\n    limit: 10,\n    offset: 2,\n    metric_type: MetricType.L2,\n    param: searchParams,\n    consistency_level: ConsistencyLevelEnum.Strong,\n});\n","searchResult, err := milvusClient.Search(\n    context.Background(),                    // ctx\n    \"book\",                                  // CollectionName\n    []string{},                              // partitionNames\n    \"\",                                      // expr\n    []string{\"book_id\"},                     // outputFields\n    []entity.Vector{entity.FloatVector([]float32{0.1, 0.2})}, // vectors\n    \"book_intro\",                            // vectorField\n    entity.L2,                               // metricType\n    10,                                      // topK\n    sp,                                      // sp\n    opt,\n)\nif err != nil {\n    log.Fatal(\"fail to search collection:\", err.Error())\n}\n","List<String> search_output_fields = Arrays.asList(\"book_id\");\nList<List<Float>> search_vectors = Arrays.asList(Arrays.asList(0.1f, 0.2f));\n\nSearchParam searchParam = SearchParam.newBuilder()\n        .withCollectionName(\"book\")\n        .withConsistencyLevel(ConsistencyLevelEnum.STRONG)\n        .withMetricType(MetricType.L2)\n        .withOutFields(search_output_fields)\n        .withTopK(SEARCH_K)\n        .withVectors(search_vectors)\n        .withVectorFieldName(\"book_intro\")\n        .withParams(SEARCH_PARAM)\n        .build();\nR<SearchResults> respSearch = milvusClient.search(searchParam);\n","var results = await milvusClient.GetCollection(\"book\").SearchAsync(\n    vectorFieldName: \"book_intro\",\n    vectors: new ReadOnlyMemory<float>[] { new[] { 0.1f, 0.2f } },\n    SimilarityMetricType.L2,\n    // the sum of `offset` in `parameters` and `limit` should be less than 16384.\n    limit: 10,\n    parameters);\n","# Follow the previous step.\n","results[0].ids\nresults[0].distances\n","console.log(results.results)\n","fmt.Printf(\"%#v\\n\", searchResult)\nfor _, sr := range searchResult {\n    fmt.Println(sr.IDs)\n    fmt.Println(sr.Scores)\n}\n","SearchResultsWrapper wrapperSearch = new SearchResultsWrapper(respSearch.getData().getResults());\nSystem.out.println(wrapperSearch.getIDScore(0));\nSystem.out.println(wrapperSearch.getFieldData(\"book_id\", 0));\n","// # get the IDs of all returned hits\nConsole.WriteLine(results.Ids.LongIds)\n// alternative Console.WriteLine(results.Ids.StringIds)\n\n// get the scores to the query vector from all returned hits\nforeach (var score in results.Scores.ToList()) {\n    Console.WriteLine(score);\n};\n","collection.release()\n","await milvusClient.releaseCollection({  collection_name: \"book\",});\n","err := milvusClient.ReleaseCollection(\n    context.Background(),                            // ctx\n    \"book\",                                          // CollectionName\n)\nif err != nil {\n    log.Fatal(\"failed to release collection:\", err.Error())\n}\n","milvusClient.releaseCollection(\n        ReleaseCollectionParam.newBuilder()\n                .withCollectionName(\"book\")\n                .build());\n","var collection = milvusClient.GetCollection(\"book\").ReleaseAsync();\n"],"headingContent":"","anchorList":[{"label":"Conduct a Vector Similarity Search","href":"Conduct-a-Vector-Similarity-Search","type":1,"isActive":false},{"label":"Load collection","href":"Load-collection","type":2,"isActive":false},{"label":"Prepare search parameters","href":"Prepare-search-parameters","type":2,"isActive":false},{"label":"Conduct a vector search","href":"Conduct-a-vector-search","type":2,"isActive":false},{"label":"Limits","href":"Limits","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}