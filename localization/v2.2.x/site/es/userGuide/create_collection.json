{"codeList":["from pymilvus import CollectionSchema, FieldSchema, DataType\nbook_id = FieldSchema(\n  name=\"book_id\",\n  dtype=DataType.INT64,\n  is_primary=True,\n)\nbook_name = FieldSchema(\n  name=\"book_name\",\n  dtype=DataType.VARCHAR,\n  max_length=200,\n)\nword_count = FieldSchema(\n  name=\"word_count\",\n  dtype=DataType.INT64,\n)\nbook_intro = FieldSchema(\n  name=\"book_intro\",\n  dtype=DataType.FLOAT_VECTOR,\n  dim=2\n)\nschema = CollectionSchema(\n  fields=[book_id, book_name, word_count, book_intro],\n  description=\"Test book search\",\n  enable_dynamic_field=True\n)\ncollection_name = \"book\"\n","import { DataType } from \"@zilliz/milvus2-sdk-node\";\nconst params = {\n  collection_name: \"book\",\n  description: \"Test book search\",\n  fields: [\n    {\n      name: \"book_intro\",\n      description: \"\",\n      data_type: DataType.FloatVector,\n      dim: 2,\n    },\n    {\n      name: \"book_id\",\n      data_type: DataType.Int64,\n      is_primary_key: true,\n      description: \"\",\n    },\n    {\n      name: \"book_name\",\n      data_type: DataType.VarChar,\n      max_length: 256,\n      description: \"\",\n    },\n    {\n      name: \"word_count\",\n      data_type: DataType.Int64,\n      description: \"\",\n    },\n  ],\n  enableDynamicField: true\n};\n","var (\n    collectionName = \"book\"\n    )\nschema := &entity.Schema{\n  CollectionName: collectionName,\n  Description:    \"Test book search\",\n  Fields: []*entity.Field{\n    {\n      Name:       \"book_id\",\n      DataType:   entity.FieldTypeInt64,\n      PrimaryKey: true,\n      AutoID:     false,\n    },\n    {\n      Name:       \"word_count\",\n      DataType:   entity.FieldTypeInt64,\n      PrimaryKey: false,\n      AutoID:     false,\n    },\n    {\n      Name:     \"book_intro\",\n      DataType: entity.FieldTypeFloatVector,\n      TypeParams: map[string]string{\n          \"dim\": \"2\",\n      },\n    },\n  },\n  EnableDynamicField: true\n}\n","FieldType fieldType1 = FieldType.newBuilder()\n        .withName(\"book_id\")\n        .withDataType(DataType.Int64)\n        .withPrimaryKey(true)\n        .withAutoID(false)\n        .build();\nFieldType fieldType2 = FieldType.newBuilder()\n        .withName(\"word_count\")\n        .withDataType(DataType.Int64)\n        .build();\nFieldType fieldType3 = FieldType.newBuilder()\n        .withName(\"book_intro\")\n        .withDataType(DataType.FloatVector)\n        .withDimension(2)\n        .build();\nCreateCollectionParam createCollectionReq = CreateCollectionParam.newBuilder()\n        .withCollectionName(\"book\")\n        .withDescription(\"Test book search\")\n        .withShardsNum(2)\n        .addFieldType(fieldType1)\n        .addFieldType(fieldType2)\n        .addFieldType(fieldType3)\n        .withEnableDynamicField(true)\n        .build();\n","curl -X 'POST' \\\n  '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/collections/create' \\\n  -H 'Authorization: Bearer ${TOKEN}' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n       \"dbName\": \"default\",   \n       \"collectionName\": \"medium_articles\",\n       \"dimension\": 256,\n       \"metricType\": \"L2\",\n       \"primaryField\": \"id\",\n       \"vectorField\": \"vector\"\n      }'\n","{\n    \"code\": 200,\n    \"data\": {}\n}\n","var schema = new CollectionSchema\n{\n    Fields =\n    {\n        FieldSchema.Create<long>(\"book_id\", isPrimaryKey: true),\n        FieldSchema.CreateVarchar(\"book_name\", maxLength: 200),\n        FieldSchema.Create<long>(\"word_count\"),\n        FieldSchema.CreateFloatVector(\"book_intro\", dimension: 2)\n    },\n    Description = \"Test book search\",\n    EnableDynamicFields = true\n};\n","from pymilvus import Collection\ncollection = Collection(\n    name=collection_name,\n    schema=schema,\n    using='default',\n    shards_num=2\n    )\n","await milvusClient.createCollection(param);\n","err = milvusClient.CreateCollection(\n    context.Background(), // ctx\n    schema,\n    2, // shardNum\n)\nif err != nil {\n    log.Fatal(\"failed to create collection:\", err.Error())\n}\n","milvusClient.createCollection(createCollectionReq);\n","var collection = await milvusClient.CreateCollectionAsync(collectionName, schema, shardsNum: 2);\n","curl --request POST \\\n     --url \"${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/collections/create\" \\\n     --header \"Authorization: Bearer ${TOKEN}\" \\\n     --header \"accept: application/json\" \\\n     --header \"content-type: application/json\" \\\n     -d '{\n       \"dbName\": \"default\",   \n       \"collectionName\": \"medium_articles\",\n       \"dimension\": 256,\n       \"metricType\": \"L2\",\n       \"primaryField\": \"id\",\n       \"vectorField\": \"vector\"\n      }'\n"],"headingContent":"","anchorList":[{"label":"Create a Collection","href":"Create-a-Collection","type":1,"isActive":false},{"label":"Prepare Schema","href":"Prepare-Schema","type":2,"isActive":false},{"label":"Limits","href":"Limits","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}