{"codeList":["from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.load()\n","await milvusClient.loadCollection({\n  collection_name: \"book\",\n});\n","err := milvusClient.LoadCollection(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  false                   // async\n)\nif err != nil {\n  log.Fatal(\"failed to load collection:\", err.Error())\n}\n","milvusClient.loadCollection(\n  LoadCollectionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build()\n);\n","var collection = milvusClient.GetCollection(\"book\").LoadAsync();\n","res = collection.query(\n  expr = \"book_id in [2,4,6,8]\",\n  offset = 0,\n  limit = 10, \n  output_fields = [\"book_id\", \"book_intro\"],\n)\n","const results = await milvusClient.query({\n  collection_name: \"book\",\n  expr: \"book_id in [2,4,6,8]\",\n  output_fields: [\"book_id\", \"book_intro\"],\n  limit: 10,\n  offset: 0,\n});\n","opt := client.SearchQueryOptionFunc(func(option *client.SearchQueryOption) {\n    option.Limit = 3\n    option.Offset = 0\n    option.ConsistencyLevel = entity.ClStrong\n    option.IgnoreGrowing = false\n})\n\nqueryResult, err := milvusClient.Query(\n    context.Background(),                                   // ctx\n    \"book\",                                                 // CollectionName\n    \"\",                                                     // PartitionName\n    entity.NewColumnInt64(\"book_id\", []int64{2,4,6,8}),     // expr\n    []string{\"book_id\", \"book_intro\"},                      // OutputFields\n    opt,                                                    // queryOptions\n)\nif err != nil {\n    log.Fatal(\"fail to query collection:\", err.Error())\n}\n","List<String> query_output_fields = Arrays.asList(\"book_id\", \"word_count\");\nQueryParam queryParam = QueryParam.newBuilder()\n  .withCollectionName(\"book\")\n  .withConsistencyLevel(ConsistencyLevelEnum.STRONG)\n  .withExpr(\"book_id in [2,4,6,8]\")\n  .withOutFields(query_output_fields)\n  .withOffset(0L)\n  .withLimit(10L)\n  .build();\nR<QueryResults> respQuery = milvusClient.query(queryParam);\n","var results = await Client.GetCollection(\"book\").QueryAsync(\n    expression: \"book_id in [2,4,6,8]\",\n    new QueryParameters\n    {\n        Offset = 0,\n        Limit = 10,\n        OutputFields = { \"book_id\", \"book_intro\" }\n    });\n","curl --request POST \\\n     --url '${MILVUS_HOST}:${MILVUS_PORT}/v1/vector/query' \\\n     --header 'Authorization: Bearer <TOKEN>' \\\n     --header 'accept: application/json' \\\n     --header 'content-type: application/json'\n     -d '{\n       \"collectionName\": \"collection1\",\n       \"outputFields\": [\"id\", \"name\", \"feature\", \"distance\"],\n       \"filter\": \"id in (1, 2, 3)\",\n       \"limit\": 100,\n       \"offset\": 0\n     }'\n","{\n    \"code\": 200,\n    \"data\": {}\n}\n","sorted_res = sorted(res, key=lambda k: k['book_id'])\nsorted_res\n","console.log(results.data)\n","fmt.Printf(\"%#v\\n\", queryResult)\nfor _, qr := range queryResult {\n    fmt.Println(qr.IDs)\n}\n","QueryResultsWrapper wrapperQuery = new QueryResultsWrapper(respQuery.getData());\nSystem.out.println(wrapperQuery.getFieldWrapper(\"book_id\").getFieldData());\nSystem.out.println(wrapperQuery.getFieldWrapper(\"word_count\").getFieldData());\n","# See the output of the previous step.\n"],"headingContent":"","anchorList":[{"label":"Conduct a Vector Query","href":"Conduct-a-Vector-Query","type":1,"isActive":false},{"label":"Load collection","href":"Load-collection","type":2,"isActive":false},{"label":"Conduct a vector query","href":"Conduct-a-vector-query","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}