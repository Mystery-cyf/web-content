{"codeList":["from pymilvus import connections, db\n\nconn = connections.connect(host=\"127.0.0.1\", port=19530)\n\ndatabase = db.create_database(\"book\")\n","import io.milvus.client.*;\nimport io.milvus.param.*;\n\nConnectParam connectParam = ConnectParam.newBuilder()\n    .withHost(\"127.0.0.1\")\n    .withPort(19530)\n    .build();\n\nMilvusClient client = new MilvusServiceClient(connectParam);\n\nCreateDatabaseParam createDatabaseParam = CreateDatabaseParam.newBuilder()\n    .withDatabaseName(\"book\")\n    .build();\n\nR<RpcStatus> createDatabaseResponse = client.createDatabase(createDatabaseParam);\n\nif (createDatabaseResponse.getStatus() != R.Status.Success.getCode()) {\n    System.out.println(createDatabaseResponse.getMessage());\n}\n","using Milvus.Client\n\nMilvusClient milvusClient = new MilvusClient(host: \"127.0.0.1\", port: 19530);\n\nawait milvusClient.CreateDatabaseAsync(\"book\");\n","db.using_database(\"book\")\n","// No equivalent method available.\n// Disconnect first and connect again with a specific database.\n// See below\n","// No equivalent method available.\n// Disconnect first and connect again with a specific database.\n// See below\n","conn = connections.connect(\n    host=\"127.0.0.1\",\n    port=\"19530\",\n    db_name=\"default\"\n)\n","ConnectParam connectParam = ConnectParam.newBuilder()\n    .withHost(\"127.0.0.1\")\n    .withPort(19530)\n    .withDatabaseName(\"default\")\n    .build();\n\nMilvusClient client = new MilvusServiceClient(connectParam);\n","MilvusClient milvusClient = new MilvusClient(host: \"127.0.0.1\", database: \"book\");\n","db.list_database()\n\n# Output\n# ['default', 'book']\n","R<ListDatabasesResponse> response = client.listDatabases();\n\nint dbCounts = response.getData().getDbNamesCount();\n\nfor (int i = 0; i < dbCounts; i++) {\n    System.out.println(response.getData().getDbNames(i));\n}\n\n// Output:\n//\n// default\n// book\n","var databases = await milvusClient.ListDatabasesAsync();\n\nforeach (var database in databases) {\n    Console.WriteLine(database);\n}\n\n// Output\n//\n// default\n// book\n","db.drop_database(\"book\")\n\ndb.list_database()\n\n# Output\n# ['default']\n","DropDatabaseParam dropDatabaseParam = DropDatabaseParam.newBuilder()\n    .withDatabaseName(\"book\")\n    .build();\n\nR<RpcStatus> dropDatabaseResponse = client.dropDatabase(dropDatabaseParam);\n\nR<ListDatabasesResponse> response = client.listDatabases();\n\nint dbCounts = response.getData().getDbNamesCount();\n\nfor (int i = 0; i < dbCounts; i++) {\n    System.out.println(response.getData().getDbNames(i));\n}\n\n// Output:\n//\n// default\n","await milvusClient.DropDatabaseAsync(\"book\");\n\nvar databases = await milvusClient.ListDatabasesAsync();\n\nforeach (var database in databases) {\n    Console.WriteLine(database);\n}\n\n// Output\n//\n// default\n","from pymilvus import connections, Role\n\n_HOST = '127.0.0.1'\n_PORT = '19530'\n_ROOT = \"root\"\n_ROOT_PASSWORD = \"Milvus\"\n_ROLE_NAME = \"test_role\"\n_PRIVILEGE_INSERT = \"Insert\"\n\n\ndef connect_to_milvus(db_name=\"default\"):\n    print(f\"connect to milvus\\n\")\n    connections.connect(host=_HOST, port=_PORT, user=_ROOT, password=_ROOT_PASSWORD, db_name=db_name)\n","static String _HOST = \"localhost\";\nstatic int _PORT = 19530;\nstatic String _ROOT = \"root\";\nstatic String _ROOT_PASSWORD = \"Milvus\";\nstatic String _ROLE_NAME = \"test_role\";\nstatic String _PRIVILEGE_INSERT = \"Insert\";\n\n// With specific database\npublic static MilvusClient ConnectToMilvus(String DbName) {\n    System.out.println(\"Start connecting to Milvus\");\n\n    ConnectParam connectParam = ConnectParam.newBuilder()\n        .withHost(App._HOST)\n        .withPort(App._PORT)\n        .withAuthorization(App._ROOT, App._ROOT_PASSWORD)\n        .withDatabaseName(DbName)\n        .build();\n\n    MilvusClient client = new MilvusServiceClient(connectParam);\n\n    return client;\n}\n\n// With the default database\npublic static MilvusClient ConnectToMilvus() {\n    System.out.println(\"Start connecting to Milvus\");\n\n    ConnectParam connectParam = ConnectParam.newBuilder()\n        .withHost(App._HOST)\n        .withPort(App._PORT)\n        .withAuthorization(App._ROOT, App._ROOT_PASSWORD)\n        .build();\n\n    MilvusClient client = new MilvusServiceClient(connectParam);\n\n    return client;\n}\n","string _HOST = \"127.0.0.1\";\nstring _ROOT = \"root\";\nstring _ROOT_PASSWORD = \"Milvus\";\nstring _ROLE_NAME = \"test_role\";\nstring _PRIVILEGE_INSERT = \"Insert\";\n\nMilvusClient connect_to_milvus(string db_name=\"default\") {\n    MilvusClient milvusClient = new MilvusClient(host: _HOST, username: _ROOT, password: _ROOT_PASSWORD, database: db_name);\n\n    return milvusClient;\n}\n","connect_to_milvus()\nrole = Role(_ROLE_NAME)\nrole.create()\n\nconnect_to_milvus()\nrole.grant(\"Collection\", \"*\", _PRIVILEGE_INSERT)\nprint(role.list_grants())\nprint(role.list_grant(\"Collection\", \"*\"))\nrole.revoke(\"Global\", \"*\", _PRIVILEGE_INSERT)\n","MilvusClient client = ConnectToMilvus()\n\nCreateRoleParam createRoleParam = CreateRoleParam.newBuilder()\n    .withRoleName(App._ROLE_NAME)\n    .build();\n\nR<RpcStatus> response = client.createRole(createRoleParam);\n\nGrantRolePrivilegeParam grantRolePriviligeParam = GrantRolePrivilegeParam.newBuilder()\n    .withRoleName(App._ROLE_NAME)\n    .withPrivilege(App._PRIVILEGE_INSERT)\n    .withObject(\"Collection\")\n    .withObjectName(\"*\")\n    .build(); \n\nR<RpcStatus> response = client.grantRolePrivilege(grantRolePriviligeParam);\n\nSelectGrantForRoleParam selectGrantForRoleParam = SelectGrantForRoleParam.newBuilder()\n    .withRoleName(App._ROLE_NAME)\n    .build();\n\nR<SelectGrantResponse> response = client.selectGrantForRole(selectGrantForRoleParam);\n\nSystem.out.println(response.getData());\n","MilvusClient client = connect_to_milvus();\n\ntry {\n    await client.CreateRoleAsync(_ROLE_NAME);\n} catch (Exception) {\n    Console.WriteLine(\"Already exists!\");\n}\n\nawait client.GrantRolePrivilegeAsync(_ROLE_NAME, @object: \"Collection\", objectName: \"*\", privilege: _PRIVILEGE_INSERT);\n\nvar grants1 = await client.ListGrantsForRoleAsync(_ROLE_NAME);\n\nfor (int i = 0; i < grants1.Count; i++) {\n    var grant = grants1[i];\n    Console.WriteLine(grant.Role);\n    Console.WriteLine(grant.Grantor.UserName);\n    Console.WriteLine(grant.DbName);\n    Console.WriteLine(grant.ObjectName);\n}\n\nawait client.RevokeRolePrivilegeAsync(_ROLE_NAME, @object: \"Collection\", objectName: \"*\", privilege: _PRIVILEGE_INSERT);\n\nvar grants2 = await client.SelectGrantForRoleAndObjectAsync(_ROLE_NAME, @object: \"Collection\", objectName: \"*\");\n\nfor (int i = 0; i< grants2.Count; i++) {\n    var grant = grants2[i];\n    Console.WriteLine(grant.Role);\n    Console.WriteLine(grant.Grantor.UserName);\n    Console.WriteLine(grant.DbName);\n    Console.WriteLine(grant.ObjectName);    \n}\n","# NOTE: please make sure the 'book' db has been created\nconnect_to_milvus(db_name=\"book\")\n# This role will have the insert permission of all collections under foo db,\n# excluding the insert permissions of collections under other dbs\nrole.grant(\"Collection\", \"*\", _PRIVILEGE_INSERT)\nprint(role.list_grants())\nprint(role.list_grant(\"Collection\", \"*\"))\nrole.revoke(\"Global\", \"*\", _PRIVILEGE_INSERT)\n","MilvusClient client = ConnectToMilvus(\"book\")\n\nGrantRolePrivilegeParam grantRolePriviligeParam = GrantRolePrivilegeParam.newBuilder()\n    .withRoleName(App._ROLE_NAME)\n    .withPrivilege(App._PRIVILEGE_INSERT)\n    .withObject(\"Collection\")\n    .withObjectName(\"*\")\n    .build(); \n\nR<RpcStatus> response = client.grantRolePrivilege(grantRolePriviligeParam);\n\nSelectGrantForRoleParam selectGrantForRoleParam = SelectGrantForRoleParam.newBuilder()\n    .withRoleName(App._ROLE_NAME)\n    .build();\n\nR<SelectGrantResponse> response = client.selectGrantForRole(selectGrantForRoleParam);\n\nSystem.out.println(response.getData());\n","// NOTE: please make sure the 'book' db has been created\nMilvusClient client = connect_to_milvus(db_name: \"book\");\n\ntry {\n    await client.CreateRoleAsync(_ROLE_NAME);\n} catch (Exception) {\n    Console.WriteLine(\"Already exists!\");\n}\n\n// This role will have the insert permission of all collections under foo db,\n// excluding the insert permissions of collections under other dbs\nawait client.GrantRolePrivilegeAsync(_ROLE_NAME, @object: \"Collection\", objectName: \"*\", privilege: _PRIVILEGE_INSERT);\n\nvar grants1 = await client.ListGrantsForRoleAsync(_ROLE_NAME);\n\nfor (int i = 0; i < grants1.Count; i++) {\n    var grant = grants1[i];\n    Console.WriteLine(grant.Role);\n    Console.WriteLine(grant.Grantor.UserName);\n    Console.WriteLine(grant.DbName);\n    Console.WriteLine(grant.ObjectName);\n}\n\nawait client.RevokeRolePrivilegeAsync(_ROLE_NAME, @object: \"Collection\", objectName: \"*\", privilege: _PRIVILEGE_INSERT);\n\nvar grants2 = await client.SelectGrantForRoleAndObjectAsync(_ROLE_NAME, @object: \"Collection\", objectName: \"*\");\n\nfor (int i = 0; i< grants2.Count; i++) {\n    var grant = grants2[i];\n    Console.WriteLine(grant.Role);\n    Console.WriteLine(grant.Grantor.UserName);\n    Console.WriteLine(grant.DbName);\n    Console.WriteLine(grant.ObjectName);    \n}\n","# NOTE: please make sure the 'book' db has been created\ndb_name = \"book\"\nconnect_to_milvus()\nrole.grant(\"Collection\", \"*\", _PRIVILEGE_INSERT, db_name=db_name)\nprint(role.list_grants(db_name=db_name))\nprint(role.list_grant(\"Collection\", \"*\", db_name=db_name))\nrole.revoke(\"Global\", \"*\", _PRIVILEGE_INSERT, db_name=db_name)\n","MilvusClient client = ConnectToMilvus()\n\nCreateRoleParam createRoleParam = CreateRoleParam.newBuilder()\n    .withRoleName(App._ROLE_NAME)\n    .build();\n\nR<RpcStatus> response = client.createRole(createRoleParam);\n\nGrantRolePrivilegeParam grantRolePriviligeParam = GrantRolePrivilegeParam.newBuilder()\n    .withRoleName(App._ROLE_NAME)\n    .withPrivilege(App._PRIVILEGE_INSERT)\n    .withObject(\"Collection\")\n    .withObjectName(\"*\")\n    .withDatabaseName(\"book\")\n    .build(); \n\nR<RpcStatus> response = client.grantRolePrivilege(grantRolePriviligeParam);\n\nSelectGrantForRoleParam selectGrantForRoleParam = SelectGrantForRoleParam.newBuilder()\n    .withRoleName(App._ROLE_NAME)\n    .build();\n\nR<SelectGrantResponse> response = client.selectGrantForRole(selectGrantForRoleParam);\n\nSystem.out.println(response.getData());\n","// No equivalent usage available.\n"],"headingContent":"","anchorList":[{"label":"Manage Databases","href":"Manage-Databases","type":1,"isActive":false},{"label":"Create database","href":"Create-database","type":2,"isActive":false},{"label":"Use a database","href":"Use-a-database","type":2,"isActive":false},{"label":"List databases","href":"List-databases","type":2,"isActive":false},{"label":"Drop database","href":"Drop-database","type":2,"isActive":false},{"label":"Use the RBAC with database","href":"Use-the-RBAC-with-database","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}