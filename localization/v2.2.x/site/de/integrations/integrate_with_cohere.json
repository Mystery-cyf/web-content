{"codeList":["pip install pymilvus cohere pandas numpy tqdm\n","import cohere\nimport pandas\nimport numpy as np\nfrom tqdm import tqdm\nfrom pymilvus import connections, FieldSchema, CollectionSchema, DataType, Collection, utility\n","FILE = 'https://rajpurkar.github.io/SQuAD-explorer/dataset/train-v2.0.json'  # The SQuAD dataset url\nCOLLECTION_NAME = 'question_answering_db'  # Collection name\nDIMENSION = 768  # Embeddings size, cohere embeddings default to 4096 with the large model\nCOUNT = 5000  # How many questions to embed and insert into Milvus\nBATCH_SIZE = 96 # How large of batches to use for embedding and insertion\nMILVUS_HOST = 'localhost'  # Milvus server URI\nMILVUS_PORT = '19530'\nCOHERE_API_KEY = 'replace-this-with-the-cohere-api-key'  # API key obtained from Cohere\n","# Download the dataset\ndataset = pandas.read_json(FILE)\n\n# Clean up the dataset by grabbing all the question answer pairs\nsimplified_records = []\nfor x in dataset['data']:\n    for y in x['paragraphs']:\n        for z in y['qas']:\n            if len(z['answers']) != 0:\n                simplified_records.append({'question': z['question'], 'answer': z['answers'][0]['text']})\n\n# Grab the amount of records based on COUNT\nsimplified_records = pandas.DataFrame.from_records(simplified_records)\nsimplified_records = simplified_records.sample(n=min(COUNT, len(simplified_records)), random_state = 42)\n\n# Check the length of the cleaned dataset matches count\nprint(len(simplified_records))\n","5000\n","# Connect to Milvus Database\nconnections.connect(host=MILVUS_HOST, port=MILVUS_PORT)\n\n# Remove collection if it already exists\nif utility.has_collection(COLLECTION_NAME):\n    utility.drop_collection(COLLECTION_NAME)\n\n# Create collection which includes the id, title, and embedding.\nfields = [\n    FieldSchema(name='id', dtype=DataType.INT64, is_primary=True, auto_id=True),\n    FieldSchema(name='original_question', dtype=DataType.VARCHAR, max_length=1000),\n    FieldSchema(name='answer', dtype=DataType.VARCHAR, max_length=1000),\n    FieldSchema(name='original_question_embedding', dtype=DataType.FLOAT_VECTOR, dim=DIMENSION)\n]\nschema = CollectionSchema(fields=fields)\ncollection = Collection(name=COLLECTION_NAME, schema=schema)\n\n# Create an IVF_FLAT index for collection.\nindex_params = {\n    'metric_type':'L2',\n    'index_type':\"IVF_FLAT\",\n    'params':{\"nlist\": 1024}\n}\ncollection.create_index(field_name=\"original_question_embedding\", index_params=index_params)\ncollection.load()\n","# Set up a co:here client.\ncohere_client = cohere.Client(COHERE_API_KEY)\n\n# Extract embedings from questions using Cohere\ndef embed(texts):\n    res = cohere_client.embed(texts, model='multilingual-22-12')\n    return res.embeddings\n\n# Insert each question, answer, and qustion embedding\ntotal = pandas.DataFrame()\nfor batch in tqdm(np.array_split(simplified_records, (COUNT/BATCH_SIZE) + 1)):\n    questions = batch['question'].tolist()\n    \n    data = [\n        questions,\n        batch['answer'].tolist(),\n        embed(questions)      \n    ]\n\n    collection.insert(data)\n\n# Flush at end to make sure all rows are sent for indexing\ncollection.flush()\n","# Search the database for an answer to a question text\ndef search(text, top_k = 5):\n\n    # Set search params \n    search_params = {\n        \"metric_type\": \"L2\",\n        \"params\": {\"nprobe\": 10}\n    }\n\n    results = collection.search(\n        data = embed([text]),  # Embeded the question\n        anns_field=\"original_question_embedding\",  # Search across the original original question embeddings\n        param=search_params,\n        limit = top_k,  # Limit to top_k results per search\n        output_fields=['original_question', 'answer']  # Include the original question and answer in the result\n    )\n\n    ret = []\n    for hit in results[0]:\n        row = []\n        row.extend([hit.entity.get('answer'), hit.score, hit.entity.get('original_question') ])  # Get the answer, distance, and original question for the results\n        ret.append(row)\n    return ret\n\n# Ask these questions\nsearch_questions = ['What kills bacteria?', 'Whats the biggest dog?']\n\n# Print out the results in order of [answer, similarity score, original question]\nfor question in search_questions:\n    print('Question:', question)\n    print('\\nAnswer,', 'Distance,', 'Original Question')\n    for result in search(question):\n        print(result)\n    print()\n","Question: What kills bacteria?\n\nAnswer, Distance, Original Question\n['Phage therapy', 5976.171875, 'What has been talked about to treat resistant bacteria?']\n['oral contraceptives', 7065.4130859375, 'In therapy, what does the antibacterial interact with?']\n['farming', 7250.0791015625, 'What makes bacteria resistant to antibiotic treatment?']\n['slowing down the multiplication of bacteria or killing the bacteria', 7291.306640625, 'How do antibiotics work?']\n['converting nitrogen gas to nitrogenous compounds', 7310.67724609375, 'What do bacteria do in soil?']\n\nQuestion: Whats the biggest dog?\n\nAnswer, Distance, Original Question\n['English Mastiff', 4205.16064453125, 'What breed was the largest dog known to have lived?']\n['Rico', 6108.88427734375, 'What is the name of the dog that could ID over 200 things?']\n['part of the family', 7904.853515625, 'Most people today describe their dogs as what?']\n['77.5 million', 8752.98828125, 'How many people in the United States are said to own dog?']\n['Iditarod Trail Sled Dog Race', 9251.58984375, 'Which dog-sled race in Alaska is the most famous?']\n"],"headingContent":"","anchorList":[{"label":"Question Answering Using Milvus and Cohere","href":"Question-Answering-Using-Milvus-and-Cohere","type":1,"isActive":false},{"label":"Before you begin","href":"Before-you-begin","type":2,"isActive":false},{"label":"Parameters","href":"Parameters","type":2,"isActive":false},{"label":"Prepare the dataset","href":"Prepare-the-dataset","type":2,"isActive":false},{"label":"Create a collection","href":"Create-a-collection","type":2,"isActive":false},{"label":"Insert data","href":"Insert-data","type":2,"isActive":false},{"label":"Ask questions","href":"Ask-questions","type":2,"isActive":false}]}