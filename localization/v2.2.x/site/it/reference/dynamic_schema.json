{"codeList":["from pymilvus import connections, Collection, FieldSchema, CollectionSchema, DataType, utility\n\nconnections.connect(host='localhost', port='19530')\n\n# 1. define fields\nfields = [\n    FieldSchema(name=\"id\", dtype=DataType.INT64, is_primary=True, auto_id=True),\n    FieldSchema(name=\"title\", dtype=DataType.VARCHAR, max_length=512),\n    FieldSchema(name=\"title_vector\", dtype=DataType.FLOAT_VECTOR, dim=768)\n]\n# 2. enable dynamic schema in schema definition\nschema = CollectionSchema(\n        fields, \n        \"The schema for a medium news collection\", \n        enable_dynamic_field=True\n)\n\n# 3. reference the schema in a collection\ncollection = Collection(\"medium_articles_with_dynamic\", schema)\n\n# 4. index the vector field and load the collection\nindex_params = {\n    \"index_type\": \"AUTOINDEX\",\n    \"metric_type\": \"L2\",\n    \"params\": {}\n}\n\ncollection.create_index(\n  field_name=\"title_vector\", \n  index_params=index_params\n)\n\n# 5. load the collection\ncollection.load()\n","import json\nimport pandas as pd\n\n# read the raw dataset and convert it to JSON\ndf = pd.read_csv('New_Medium_Data.csv')\ndf.to_json('New_Medium_Data.json', orient='records')\n\n# convert the vector field values into real numbers\ndef m(row):\n    row.update({'title_vector': list(map(float, row['title_vector'][1:-1].split(', ')))})\n    return row\n\nwith open('New_Medium_Data.json') as f:\n    data_rows = json.load(f)\n    data_rows = map(m, data_rows)\n    data_rows = list(data_rows)\n","# 6. insert data\ncollection.insert(data_rows)\n\n# Call the flush API to make inserted data immediately available for search\ncollection.flush()\n\nprint(\"Entity counts: \", collection.num_entities)\n\n# Output\n# Entity counts:  5979\n","# Use the vector field of the first entity as the query vector.\nresult = collection.search(\n    data=[data_rows[0]['title_vector']],\n    anns_field=\"title_vector\",\n    param={\"metric_type\": \"L2\", \"params\": {\"nprobe\": 10}},\n    limit=3,\n    expr='claps > 30 and reading_time < 10',\n    output_fields=[\"title\", \"reading_time\", \"claps\"],\n)\n\nfor hits in result:\n    print(\"Matched IDs: \", hits.ids)\n    print(\"Distance to the query vector: \", hits.distances)\n    print(\"Matched articles: \")\n    for hit in hits:\n        print(\n            \"Title: \", \n            hit.entity.get(\"title\"), \n            \", Reading time: \", \n            hit.entity.get(\"reading_time\"), \n            \", Claps\", hit.entity.get(\"claps\")\n        )\n\n# Output:\n# Matched IDs:  [442005795759615782, 442005795759615816, 442005795759613616]\n# Distance to the query vector:  [0.36103832721710205, 0.3767401874065399, 0.4162980318069458]\n# Matched articles: \n# Title:  The Hidden Side Effect of the Coronavirus , Reading time:  8 , Claps 83\n# Title:  Why The Coronavirus Mortality Rate is Misleading , Reading time:  9 , Claps 2900\n# Title:  Coronavirus shows what ethical Amazon could look like , Reading time:  4 , Claps 51\n","...\nexpr='$meta[\"#key\"] in [\"a\", \"b\", \"c\"]'\n...\n"],"headingContent":"","anchorList":[{"label":"Dynamic Schema","href":"Dynamic-Schema","type":1,"isActive":false},{"label":"Create collection with dynamic schema enabled","href":"Create-collection-with-dynamic-schema-enabled","type":2,"isActive":false},{"label":"Insert dynamic data","href":"Insert-dynamic-data","type":2,"isActive":false},{"label":"Search with dynamic fields","href":"Search-with-dynamic-fields","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}