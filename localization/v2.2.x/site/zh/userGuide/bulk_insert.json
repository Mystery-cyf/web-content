{"codeList":["{\n  \"rows\":[\n    {\"book_id\": 101, \"word_count\": 13, \"book_intro\": [1.1, 1.2]},\n    {\"book_id\": 102, \"word_count\": 25, \"book_intro\": [2.1, 2.2]},\n    {\"book_id\": 103, \"word_count\": 7, \"book_intro\": [3.1, 3.2]},\n    {\"book_id\": 104, \"word_count\": 12, \"book_intro\": [4.1, 4.2]},\n    {\"book_id\": 105, \"word_count\": 34, \"book_intro\": [5.1, 5.2]}\n  ]\n}\n\n# To include dynamic fields, do as follows:\n\n{\n  \"rows\":[\n    {\"book_id\": 101, \"word_count\": 13, \"book_intro\": [1.1, 1.2], \"book_props\": {\"year\": 2015, \"price\": 23.43}},\n    {\"book_id\": 102, \"word_count\": 25, \"book_intro\": [2.1, 2.2], \"book_props\": {\"year\": 2018, \"price\": 15.05}},\n    {\"book_id\": 103, \"word_count\": 7, \"book_intro\": [3.1, 3.2], \"book_props\": {\"year\": 2020, \"price\": 36.68}},\n    {\"book_id\": 104, \"word_count\": 12, \"book_intro\": [4.1, 4.2] , \"book_props\": {\"year\": 2019, \"price\": 20.14}},\n    {\"book_id\": 105, \"word_count\": 34, \"book_intro\": [5.1, 5.2] , \"book_props\": {\"year\": 2021, \"price\": 9.36}}\n  ]\n}\n","import numpy\nnumpy.save('book_id.npy', numpy.array([101, 102, 103, 104, 105]))\nnumpy.save('word_count.npy', numpy.array([13, 25, 7, 12, 34]))\narr = numpy.array([[1.1, 1.2],\n            [2.1, 2.2],\n            [3.1, 3.2],\n            [4.1, 4.2],\n            [5.1, 5.2]])\nnumpy.save('book_intro.npy', arr)\narr = numpy.array([json.dumps({\"year\": 2015, \"price\": 23.43}),\n            json.dumps({\"year\": 2018, \"price\": 15.05}),\n            json.dumps({\"year\": 2020, \"price\": 36.68}),\n            json.dumps({\"year\": 2019, \"price\": 20.14}),\n            json.dumps({\"year\": 2021, \"price\": 9.36})])\nnumpy.save('book_props.npy', arr)\n","numpy.save('$meta.py', numpy.array([ json.dumps({x: 2}), json.dumps({y: 8, z: 2}) ]))\n","from pymilvus import utility\ntask_id = utility.do_bulk_insert(\n    collection_name=\"book\",\n    partition_name=\"2022\",\n    files=[\"test.json\"]\n)\n","import io.milvus.param.bulkinsert.BulkInsertParam;\nimport io.milvus.response.BulkInsertResponseWrapper;\nimport io.milvus.grpc.ImportResponse;\nimport io.milvus.param.R;\n\nBulkInsertParam param = BulkInsertParam.newBuilder()\n        .withCollectionName(\"book\")\n        .withPartitionName(\"2022\")\n        .addFile(\"test.json\")\n        .build()\nR<ImportResponse> response = milvusClient.bulkInsert(param);\nBulkInsertResponseWrapper wrapper = new BulkInsertResponseWrapper(response.getData());\ntask_id = wrapper.getTaskID();\n","from pymilvus import utility\ntask_id = utility.do_bulk_insert(\n    collection_name=\"book\",\n    partition_name=\"2022\",\n    files=[\"book_id.npy\", \"word_count.npy\", \"book_intro.npy\", \"book_props.npy\"]\n)\n","import io.milvus.param.bulkinsert.BulkInsertParam;\nimport io.milvus.response.BulkInsertResponseWrapper;\nimport io.milvus.grpc.ImportResponse;\nimport io.milvus.param.R;\n\nBulkInsertParam param = BulkInsertParam.newBuilder()\n        .withCollectionName(\"book\")\n        .withPartitionName(\"2022\")\n        .addFile(\"book_id.npy\")\n        .addFile(\"word_count.npy\")\n        .addFile(\"book_intro.npy\")\n        .addFile(\"book_props.npy\")\n        .build()\nR<ImportResponse> response = milvusClient.bulkInsert(param);\nBulkInsertResponseWrapper wrapper = new BulkInsertResponseWrapper(response.getData());\ntask_id = wrapper.getTaskID();\n","from pymilvus import utility, BulkInsertState\ntask = utility.get_bulk_insert_state(task_id=task_id)\nprint(\"Task state:\", task.state_name)\nprint(\"Imported files:\", task.files)\nprint(\"Collection name:\", task.collection_name)\nprint(\"Partition name:\", task.partition_name)\nprint(\"Start time:\", task.create_time_str)\nprint(\"Imported row count:\", task.row_count)\nprint(\"Entities ID array generated by this task:\", task.ids)\n\nif task.state == BulkInsertState.ImportFailed:\n    print(\"Failed reason:\", task.failed_reason)\n","import io.milvus.param.bulkinsert.GetBulkInsertStateParam;\nimport io.milvus.response.GetBulkInsertStateWrapper;\nimport io.milvus.grpc.GetImportStateResponse;\nimport io.milvus.grpc.ImportState;\nimport io.milvus.param.R;\n\nGetBulkInsertStateParam param = GetBulkInsertStateParam.newBuilder()\n        .withTask(task_id)\n        .build()\nR<GetImportStateResponse> response = milvusClient.getBulkInsertState(param);\nGetBulkInsertStateWrapper wrapper = new GetBulkInsertStateWrapper(response.getData());\nImportState state = wrapper.getState();\nlong row_count = wrapper.getImportedCount();\nString create_ts = wrapper.getCreateTimeStr();\nString failed_reason = wrapper.getFailedReason();\nString files = wrapper.getFiles();\nint progress = wrapper.getProgress();\n","tasks = utility.list_bulk_insert_tasks(collection_name=\"book\", limit=10)\nfor task in tasks:\n    print(task)\n","import io.milvus.param.bulkinsert.ListBulkInsertTasksParam;\nimport io.milvus.grpc. ListImportTasksResponse;\nimport io.milvus.grpc.GetImportStateResponse;\nimport io.milvus.grpc.ImportState;\nimport io.milvus.param.R;\n\nListBulkInsertTasksParam param = ListBulkInsertTasksParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build()\nR<ListImportTasksResponse> response = milvusClient.listBulkInsertTasks(param);\nList<GetImportStateResponse> tasks = response.getTasksList();\nfor (GetImportStateResponse task : tasks) {\n    GetBulkInsertStateWrapper wrapper = new GetBulkInsertStateWrapper(task);\n    ImportState state = wrapper.getState();\n    long row_count = wrapper.getImportedCount();\n    String create_ts = wrapper.getCreateTimeStr();\n    String failed_reason = wrapper.getFailedReason();\n    String files = wrapper.getFiles();\n}\n","rootCoord:\n  # (in seconds) Duration after which an import task will expire (be killed). Default 900 seconds (15 minutes).\n  # Note: If default value is to be changed, change also the default in: internal/util/paramtable/component_param.go\n  importTaskExpiration: 900\n  # (in seconds) Milvus will keep the record of import tasks for at least `importTaskRetention` seconds. Default 86400\n  # seconds (24 hours).\n  # Note: If default value is to be changed, change also the default in: internal/util/paramtable/component_param.go\n  importTaskRetention: 86400\n","import numpy as np\ndata = [True, False, True, False]\ndt = np.dtype('bool', (len(data)))\narr = np.array(data, dtype=dt)\nnp.save(file_path, arr)\n","import numpy as np\ndata = [1, 2, 3, 4]\ndt = np.dtype('int8', (len(data)))\narr = np.array(data, dtype=dt)\nnp.save(file_path, arr)\n","import numpy as np\ndata = [1, 2, 3, 4]\ndt = np.dtype('int16', (len(data)))\narr = np.array(data, dtype=dt)\nnp.save(file_path, arr)\n","import numpy as np\ndata = [1, 2, 3, 4]\ndt = np.dtype('int32', (len(data)))\narr = np.array(data, dtype=dt)\nnp.save(file_path, arr)\n","import numpy as np\ndata = [1, 2, 3, 4]\ndt = np.dtype('int64', (len(data)))\narr = np.array(data, dtype=dt)\nnp.save(file_path, arr)\n","import numpy as np\ndata = [0.1, 0.2, 0.3, 0.4]\ndt = np.dtype('float32', (len(data)))\narr = np.array(data, dtype=dt)\nnp.save(file_path, arr)\n","import numpy as np\ndata = [0.1, 0.2, 0.3, 0.4]\ndt = np.dtype('float64', (len(data)))\narr = np.array(data, dtype=dt)\nnp.save(file_path, arr)\n","import numpy as np\ndata = [\"a\", \"b\", \"c\", \"d\"]\narr = np.array(data)\nnp.save(file_path, arr)\n","import numpy as np\ndata = [\n    [43, 35, 124, 90],\n    [65, 212, 12, 57],\n    [6, 126, 232, 78],\n    [87, 189, 38, 22],\n]\ndt = np.dtype('uint8', (len(data), 4))\narr = np.array(data)\nnp.save(file_path, arr)\n","import numpy as np\ndata = [\n    [1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8],\n    [2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8],\n    [3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8],\n    [4.1, 4.2, 4.3, 4.4, 4.5, 4.6, 4.7, 4.8],\n]\ndt = np.dtype('float32', (len(data), 8))\narr = np.array(data)\nnp.save(file_path, arr)\n","task_1 = utility.do_bulk_insert(\n    collection_name=\"book\",\n    files=[\"task_1/book_id.npy\", \"task_1/word_count.npy\", \"task_1/book_intro.npy\", \"task_1/book_props.npy\"]\n)\ntask_2 = utility.do_bulk_insert(\n    collection_name=\"book\",\n    files=[\"task_2/book_id.npy\", \"task_2/word_count.npy\", \"task_2/book_intro.npy\", \"task_2/book_props.npy\"]\n)\n","utility.wait_for_index_building_complete(collection_name)\n","while (true) {\n    R<DescribeIndexResponse> response = milvusClient.describeIndex(\n        DescribeIndexParam.newBuilder()\n            .withCollectionName(collection_name)\n            .withIndexName(index_name)\n            .build());\n    IndexDescription desc = response.getData().getIndexDescriptions(0);\n    if (desc.getIndexedRows() == desc.getTotalRows()) {\n        break;\n    }\n}\n","collection.load(_refresh = True)\n","R<RpcStatus> response = milvusClient.loadCollection(\n    LoadCollectionParam.newBuilder()\n        .withCollectionName(collection_name)\n        .withRefresh(Boolean.TRUE)\n        .build());\n"],"headingContent":"","anchorList":[{"label":"Insert Entities from Files","href":"Insert-Entities-from-Files","type":1,"isActive":false},{"label":"Prepare the data file","href":"Prepare-the-data-file","type":2,"isActive":false},{"label":"Insert entities from files","href":"Insert-entities-from-files","type":2,"isActive":false},{"label":"List tasks","href":"List-tasks","type":2,"isActive":false},{"label":"Limits","href":"Limits","type":2,"isActive":false},{"label":"Reference","href":"Reference","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}