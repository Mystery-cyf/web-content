{"codeList":["vectors_left = {\n    \"ids\": [0, 1], \n    \"collection\": \"book\", \n    \"partition\": \"_default\", \n    \"field\": \"book_intro\"\n}\nimport random\nexternal_vectors = [[random.random() for _ in range(2)] for _ in range(4)]\nvectors_right = {\"float_vectors\": external_vectors}\n","// Node User Guide will be ready soon.\n","// GO User Guide will be ready soon.\n","// Java User Guide will be ready soon.\n","// CLI User Guide will be ready soon.\n","vectors_left='{\n  \"dim\": 2,\n  \"ids\": {\n    \"id_array\": [1,2],\n    \"collection_name\": \"book\",\n    \"partition_names\": [\"_default\"],\n    \"field_name\": \"book_intro\"\n  }\n}'\nvectors_right='{\n  \"dim\": 2,\n  \"vectors\": [1,2,3,4,5,6,7,8] # The numbers in the list will be automatically split into four vectors. \n}'\n","params = {\n    \"metric\": \"IP\", \n    \"dim\": 2\n}\n","// Node User Guide will be ready soon.\n","// GO User Guide will be ready soon.\n","// Java User Guide will be ready soon.\n","// CLI User Guide will be ready soon.\n","params='[\n  {\"key\": \"metric\", \"value\": \"IP\"}\n]'\n","from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.load()\n","await milvusClient.loadCollection({\n  collection_name: \"book\",\n});\n","err := milvusClient.LoadCollection(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  false                   // async\n)\nif err != nil {\n  log.Fatal(\"failed to load collection:\", err.Error())\n}\n","milvusClient.loadCollection(\n  LoadCollectionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build()\n);\n","load -c book\n","curl -X 'POST' \\\n  'http://localhost:9091/api/v1/collection/load' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"book\"\n  }'\n","from pymilvus import utility\nresults = utility.calc_distance(\n    vectors_left=vectors_left, \n    vectors_right=vectors_right, \n    params=params\n)\nprint(results)\n","// Node User Guide will be ready soon.\n","// GO User Guide will be ready soon.\n","// Java User Guide will be ready soon.\n","// CLI User Guide will be ready soon.\n","curl -X 'GET' \\\n  'http://localhost:9091/api/v1/distance' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d \"{\n    \\\"op_left\\\": $vectors_left,\n    \\\"op_right\\\": $vectors_right,\n    \\\"params\\\": $params\n  }\"\n","{\"status\":{},\"Array\":{\"FloatDist\":{\"data\":[3,7,11,15,4,10,16,22]}}}\n"],"headingContent":"","anchorList":[{"label":"Calculate Distance Between Vectors","href":"Calculate-Distance-Between-Vectors","type":1,"isActive":false},{"label":"Prepare vectors","href":"Prepare-vectors","type":2,"isActive":false},{"label":"Prepare calculation parameters","href":"Prepare-calculation-parameters","type":2,"isActive":false},{"label":"(Optional) Load collection","href":"Optional-Load-collection","type":2,"isActive":false},{"label":"Calculate vector distance","href":"Calculate-vector-distance","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}