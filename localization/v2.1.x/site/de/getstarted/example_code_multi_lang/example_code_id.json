{"codeList":["pip3 install pymilvus==2.1.x\n","$ wget https://raw.githubusercontent.com/milvus-io/pymilvus/v2.1.x/examples/hello_milvus.py\n","from pymilvus import connections, FieldSchema, CollectionSchema, DataType, Collection\n","connections.connect(host='localhost', port='19530')\n","dim = 128\ndefault_fields = [\n    FieldSchema(name=\"count\", dtype=DataType.INT64, is_primary=True),\n    FieldSchema(name=\"random_value\", dtype=DataType.DOUBLE),\n    FieldSchema(name=\"float_vector\", dtype=DataType.FLOAT_VECTOR, dim=dim)\n]\ndefault_schema = CollectionSchema(fields=default_fields, description=\"test collection\")\n\nprint(f\"\\nCreate collection...\")\ncollection = Collection(name=\"hello_milvus\", schema=default_schema)\n","import random\nnb = 3000\nvectors = [[random.random() for _ in range(dim)] for _ in range(nb)]\ncollection.insert(\n    [\n        [i for i in range(nb)],\n        [float(random.randrange(-20,-10)) for _ in range(nb)],\n        vectors\n    ]\n)\n","default_index = {\"index_type\": \"IVF_FLAT\", \"params\": {\"nlist\": 128}, \"metric_type\": \"L2\"}\ncollection.create_index(field_name=\"float_vector\", index_params=default_index)\ncollection.load()\n","topK = 5\nsearch_params = {\"metric_type\": \"L2\", \"params\": {\"nprobe\": 10}}\n# define output_fields of search result\nres = collection.search(\n    vectors[-2:], \"float_vector\", search_params, topK,\n    \"count > 100\", output_fields=[\"count\", \"random_value\"]\n)\n","for raw_result in res:\n    for result in raw_result:\n        id = result.id  # result id\n        distance = result.distance\n        print(id, distance)\n","from pymilvus import connections, Collection, FieldSchema, CollectionSchema, DataType\nimport random\nconnections.connect()\nschema = CollectionSchema([\n    FieldSchema(\"film_id\", DataType.INT64, is_primary=True),\n    FieldSchema(\"films\", dtype=DataType.FLOAT_VECTOR, dim=2)\n])\ncollection = Collection(\"test_collection_search\", schema)\n# insert\ndata = [\n    [i for i in range(10)],\n    [[random.random() for _ in range(2)] for _ in range(10)],\n]\ncollection.insert(data)\ncollection.num_entities\n10\ncollection.load()\n# search\nsearch_param = {\n    \"data\": [[1.0, 1.0]],\n    \"anns_field\": \"films\",\n    \"param\": {\"metric_type\": \"L2\"},\n    \"limit\": 2,\n    \"expr\": \"film_id in [2,4,6,8]\",\n}\nres = collection.search(**search_param)\nassert len(res) == 1\nhits = res[0]\nassert len(hits) == 2\nprint(f\"- Total hits: {len(hits)}, hits ids: {hits.ids} \")\n- Total hits: 2, hits ids: [2, 4]\nprint(f\"- Top1 hit id: {hits[0].id}, distance: {hits[0].distance}, score: {hits[0].score} \")\n- Top1 hit id: 2, distance: 0.10143111646175385, score: 0.101431116461\n\n","$ python3 hello_milvus.py\n"],"headingContent":"","anchorList":[{"label":"Menjalankan Milvus menggunkan Python","href":"Menjalankan-Milvus-menggunkan-Python","type":1,"isActive":false},{"label":"1. Instal PyMilvus","href":"1-Instal-PyMilvus","type":2,"isActive":false},{"label":"2. Unduh kode sampel","href":"2-Unduh-kode-sampel","type":2,"isActive":false},{"label":"3. Pindai sampel","href":"3-Pindai-sampel","type":2,"isActive":false},{"label":"4. Jalankan sampel","href":"4-Jalankan-sampel","type":2,"isActive":false}]}