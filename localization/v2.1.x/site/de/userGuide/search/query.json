{"codeList":["from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.load()\n","await milvusClient.collectionManager.loadCollection({\n  collection_name: \"book\",\n});\n","err := milvusClient.LoadCollection(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  false                   // async\n)\nif err != nil {\n  log.Fatal(\"failed to load collection:\", err.Error())\n}\n","milvusClient.loadCollection(\n  LoadCollectionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build()\n);\n","load -c book\n","# See the following step.\n","res = collection.query(\n  expr = \"book_id in [2,4,6,8]\", \n  output_fields = [\"book_id\", \"book_intro\"],\n  consistency_level=\"Strong\"\n)\n","const results = await milvusClient.dataManager.query({\n  collection_name: \"book\",\n  expr: \"book_id in [2,4,6,8]\",\n  output_fields: [\"book_id\", \"book_intro\"],\n});\n","queryResult, err := milvusClient.Query(\n    context.Background(),                                   // ctx\n    \"book\",                                                 // CollectionName\n    \"\",                                                     // PartitionName\n    entity.NewColumnInt64(\"book_id\", []int64{2,4,6,8}),     // expr\n    []string{\"book_id\", \"book_intro\"}                       // OutputFields\n)\nif err != nil {\n    log.Fatal(\"fail to query collection:\", err.Error())\n}\n","List<String> query_output_fields = Arrays.asList(\"book_id\", \"word_count\");\nQueryParam queryParam = QueryParam.newBuilder()\n  .withCollectionName(\"book\")\n  .withConsistencyLevel(ConsistencyLevelEnum.STRONG)\n  .withExpr(\"book_id in [2,4,6,8]\")\n  .withOutFields(query_output_fields)\n  .build();\nR<QueryResults> respQuery = milvusClient.query(queryParam);\n","query\n\ncollection_name: book\n\nThe query expression: book_id in [2,4,6,8]\n\nName of partitions that contain entities(split by \",\" if multiple) []:\n\nA list of fields to return(split by \",\" if multiple) []: book_id, book_intro\n\ntimeout []:\n","curl -X 'POST' \\\n  'http://localhost:9091/api/v1/query' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"book\",\n    \"output_fields\": [\"book_id\", \"book_intro\"],\n    \"vectors\": [ [0.1,0.2] ],\n    \"expr\": \"book_id in [2,4,6,8]\"\n  }'\n","{\n  \"status\":{},\n  \"fields_data\":[\n    {\n      \"type\":5,\n      \"field_name\":\"book_id\",\n      \"Field\":{\"Scalars\":{\"Data\":{\"LongData\":{\"data\":[6,8,2,4]}}}},\n      \"field_id\":100\n    },\n    {\n      \"type\":101,\n      \"field_name\":\"book_intro\",\n      \"Field\":{\"Vectors\":{\"dim\":2,\"Data\":{\"FloatVector\":{\"data\":[6,1,8,1,2,1,4,1]}}}},\n      \"field_id\":102\n    }\n  ]\n}\n","sorted_res = sorted(res, key=lambda k: k['book_id'])\nsorted_res\n","console.log(results.data)\n","fmt.Printf(\"%#v\\n\", queryResult)\nfor _, qr := range queryResult {\n    fmt.Println(qr.IDs)\n}\n","QueryResultsWrapper wrapperQuery = new QueryResultsWrapper(respQuery.getData());\nSystem.out.println(wrapperQuery.getFieldWrapper(\"book_id\").getFieldData());\nSystem.out.println(wrapperQuery.getFieldWrapper(\"word_count\").getFieldData());\n","# Milvus CLI automatically returns the entities with the pre-defined output fields.\n","# See the output of the previous step.\n"],"headingContent":"","anchorList":[{"label":"Conduct a Vector Query","href":"Conduct-a-Vector-Query","type":1,"isActive":false},{"label":"Load collection","href":"Load-collection","type":2,"isActive":false},{"label":"Conduct a vector query","href":"Conduct-a-vector-query","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}