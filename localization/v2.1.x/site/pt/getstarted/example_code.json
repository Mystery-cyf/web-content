{"codeList":["$ wget https://raw.githubusercontent.com/milvus-io/pymilvus/v2.1.x/examples/hello_milvus.py\n","from pymilvus import (\n    connections,\n    utility,\n    FieldSchema,\n    CollectionSchema,\n    DataType,\n    Collection,\n)\n","connections.connect(\"default\", host=\"localhost\", port=\"19530\")\n","fields = [\n    FieldSchema(name=\"pk\", dtype=DataType.INT64, is_primary=True, auto_id=False),\n    FieldSchema(name=\"random\", dtype=DataType.DOUBLE),\n    FieldSchema(name=\"embeddings\", dtype=DataType.FLOAT_VECTOR, dim=8)\n]\nschema = CollectionSchema(fields, \"hello_milvus is the simplest demo to introduce the APIs\")\nhello_milvus = Collection(\"hello_milvus\", schema)\n","import random\nentities = [\n    [i for i in range(3000)],  # field pk\n    [float(random.randrange(-20, -10)) for _ in range(3000)],  # field random\n    [[random.random() for _ in range(8)] for _ in range(3000)],  # field embeddings\n]\ninsert_result = hello_milvus.insert(entities)\n","index = {\n    \"index_type\": \"IVF_FLAT\",\n    \"metric_type\": \"L2\",\n    \"params\": {\"nlist\": 128},\n}\nhello_milvus.create_index(\"embeddings\", index)\n","hello_milvus.load()\nvectors_to_search = entities[-1][-2:]\nsearch_params = {\n    \"metric_type\": \"L2\",\n    \"params\": {\"nprobe\": 10},\n}\nresult = hello_milvus.search(vectors_to_search, \"embeddings\", search_params, limit=3, output_fields=[\"random\"])\n","result = hello_milvus.query(expr=\"random > -14\", output_fields=[\"random\", \"embeddings\"])\n","result = hello_milvus.search(vectors_to_search, \"embeddings\", search_params, limit=3, expr=\"random > -12\", output_fields=[\"random\"])\n","expr = f\"pk in [{ids[0]}, {ids[1]}]\"\nhello_milvus.delete(expr)\n","utility.drop_collection(\"hello_milvus\")\n","$ python3 hello_milvus.py\n","=== start connecting to Milvus     ===\n\nDoes collection hello_milvus exist in Milvus: False\n\n=== Create collection `hello_milvus` ===\n\n\n=== Start inserting entities       ===\n\nNumber of entities in Milvus: 3000\n\n=== Start Creating index IVF_FLAT  ===\n\n\n=== Start loading                  ===\n\n\n=== Start searching based on vector similarity ===\n\nhit: (distance: 0.0, id: 2998), random field: -11.0\nhit: (distance: 0.11455299705266953, id: 1581), random field: -18.0\nhit: (distance: 0.1232629269361496, id: 2647), random field: -13.0\nhit: (distance: 0.0, id: 2999), random field: -11.0\nhit: (distance: 0.10560893267393112, id: 2430), random field: -18.0\nhit: (distance: 0.13938161730766296, id: 377), random field: -14.0\nsearch latency = 0.2796s\n\n=== Start querying with `random > -14` ===\n\nquery result:\n-{'pk': 9, 'random': -13.0, 'embeddings': [0.298433, 0.931987, 0.949756, 0.598713, 0.290125, 0.094323, 0.064444, 0.306993]}\nsearch latency = 0.2970s\n\n=== Start hybrid searching with `random > -12` ===\n\nhit: (distance: 0.0, id: 2998), random field: -11.0\nhit: (distance: 0.15773043036460876, id: 472), random field: -11.0\nhit: (distance: 0.3273330628871918, id: 2146), random field: -11.0\nhit: (distance: 0.0, id: 2999), random field: -11.0\nhit: (distance: 0.15844076871871948, id: 2218), random field: -11.0\nhit: (distance: 0.1622171700000763, id: 1403), random field: -11.0\nsearch latency = 0.3028s\n\n=== Start deleting with expr `pk in [0, 1]` ===\n\nquery before delete by expr=`pk in [0, 1]` -> result: \n-{'pk': 0, 'random': -18.0, 'embeddings': [0.142279, 0.414248, 0.378628, 0.971863, 0.535941, 0.107011, 0.207052, 0.98182]}\n-{'pk': 1, 'random': -15.0, 'embeddings': [0.57512, 0.358512, 0.439131, 0.862369, 0.083284, 0.294493, 0.004961, 0.180082]}\n\nquery after delete by expr=`pk in [0, 1]` -> result: []\n\n\n=== Drop collection `hello_milvus` ===\n"],"headingContent":"","anchorList":[{"label":"Run Milvus using Python","href":"Run-Milvus-using-Python","type":1,"isActive":false},{"label":"Preparations","href":"Preparations","type":2,"isActive":false},{"label":"Download example code","href":"Download-example-code","type":2,"isActive":false},{"label":"Scan the example code","href":"Scan-the-example-code","type":2,"isActive":false},{"label":"Run the example code","href":"Run-the-example-code","type":2,"isActive":false}]}