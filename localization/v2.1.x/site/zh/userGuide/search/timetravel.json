{"codeList":["from pymilvus import connections, Collection, FieldSchema, CollectionSchema, DataType\nconnections.connect(\"default\", host='localhost', port='19530')\ncollection_name = \"test_time_travel\"\nschema = CollectionSchema([\n  FieldSchema(\"pk\", DataType.INT64, is_primary=True),\n  FieldSchema(\"example_field\", dtype=DataType.FLOAT_VECTOR, dim=2)\n])\ncollection = Collection(collection_name, schema)\n","const { MilvusClient } =require(\"@zilliz/milvus2-sdk-node\");\nconst milvusClient = new MilvusClient(\"localhost:19530\");\nconst params = {\n  collection_name: \"test_time_travel\",\n  fields: [{\n      name: \"example_field\",\n      description: \"\",\n      data_type: 101, // DataType.FloatVector\n      type_params: {\n        dim: \"2\",\n      },\n    },\n    {\n      name: \"pk\",\n      data_type: 5, //DataType.Int64\n      is_primary_key: true,\n      description: \"\",\n    },\n  ],\n};\nawait milvusClient.collectionManager.createCollection(params);\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","connect -h localhost -p 19530 -a default\ncreate collection -c test_time_travel -f pk:INT64:primary_field -f example_field:FLOAT_VECTOR:2 -p pk\n","curl -X 'POST' \\\n  'http://localhost:9091/api/v1/collection' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"test_time_travel\",\n    \"consistency_level\": 1,\n    \"schema\": {\n      \"name\": \"test_time_travel\",\n      \"autoID\": false,\n      \"fields\": [\n        {\n          \"name\": \"pk\",\n          \"is_primary_key\": true,\n          \"data_type\": 5\n        },\n        {\n          \"name\": \"example_field\",\n          \"data_type\": 101,\n          \"type_params\": [\n            {\n              \"key\": \"dim\",\n              \"value\": \"2\"\n            }\n          ]\n        }\n      ]\n    }\n  }'\n","import random\ndata = [\n  [i for i in range(10)],\n  [[random.random() for _ in range(2)] for _ in range(10)],\n]\nbatch1 = collection.insert(data)\n","const entities1 = Array.from({ length: 10 }, (v, k) => ({\n  \"example_field\": Array.from({   length: 2  }, () => Math.random()),\n  \"pk\": k,\n}));\nconst batch1 = milvusClient.dataManager.insert({\n  collection_name: \"test_time_travel\",\n  fields_data: entities1,\n});\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","import -c test_time_travel https://raw.githubusercontent.com/zilliztech/milvus_cli/main/examples/user_guide/search_with_timetravel_1.csv\nReading file from remote URL.\nReading csv rows...  [####################################]  100%\nColumn names are ['pk', 'example_field']\nProcessed 11 lines.\n\nInserted successfully.\n\n--------------------------  ------------------\nTotal insert entities:                      10\nTotal collection entities:                  10\nMilvus timestamp:           430390410783752199\n--------------------------  ------------------\n","curl -X 'POST' \\\n  'http://localhost:9091/api/v1/entities' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"collection_name\": \"test_time_travel\",\n  \"fields_data\": [\n    {\n      \"field_name\": \"pk\",\n      \"type\": 5,\n      \"field\": [\n        0,1,2,3,4,5,6,7,8,9\n      ]\n    },\n    {\n      \"field_name\": \"example_field\",\n      \"type\": 101,\n      \"field\": [\n        [1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1]\n      ]\n    }\n  ],\n  \"num_rows\": 10\n}'\n","batch1.timestamp\n428828271234252802\n","batch1.timestamp\n428828271234252802\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","# Milvus CLI automatically returns the timestamp as shown in the previous step.\n","# Output:\n{\n  \"status\":{},\n  \"IDs\":{\"IdField\":{\"IntId\":{\"data\":[1,2,3,4,5,6,7,8,9,10]}}},\n  \"succ_index\":[0,1,2,3,4,5,6,7,8,9],\n  \"insert_cnt\":10,\n  \"timestamp\":434575831766925313\n","data = [\n  [i for i in range(10, 20)],\n  [[random.random() for _ in range(2)] for _ in range(9)],\n]\ndata[1].append([1.0,1.0])\nbatch2 = collection.insert(data)\n","const entities2 = Array.from({\n  length: 9\n}, (v, k) => ({\n  \"example_field\": Array.from({\n    length: 2\n  }, () => Math.random()),\n  \"pk\": k + 10,\n}));\nentities2.push({\n  \"pk\": 19,\n  \"example_field\": [1.0, 1.0],\n});\nconst batch2 = await milvusClient.dataManager.insert({\n  collection_name: \"test_time_travel\",\n  fields_data: entities2,\n});\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","import -c test_time_travel https://raw.githubusercontent.com/zilliztech/milvus_cli/main/examples/user_guide/search_with_timetravel_2.csv\nReading file from remote URL.\nReading csv rows...  [####################################]  100%\nColumn names are ['pk', 'example_field']\nProcessed 11 lines.\n\nInserted successfully.\n\n--------------------------  ------------------\nTotal insert entities:                      10\nTotal collection entities:                  20\nMilvus timestamp:           430390435713122310\n--------------------------  ------------------\n","curl -X 'POST' \\\n  'http://localhost:9091/api/v1/entities' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"test_time_travel\",\n    \"fields_data\": [\n      {\n        \"field_name\": \"pk\",\n        \"type\": 5,\n        \"field\": [\n          10,11,12,13,14,15,16,17,18,19\n        ]\n      },\n      {\n        \"field_name\": \"example_field\",\n        \"type\": 101,\n        \"field\": [\n          [11,12],[12,12],[13,12],[14,12],[15,12],[16,12],[17,12],[18,12],[19,12],[1,1]\n        ]\n      }\n    ],\n    \"num_rows\": 10\n  }'\n","{\n  \"status\":{},\n  \"IDs\":{\"IdField\":{\"IntId\":{\"data\":[10,11,12,13,14,15,16,17,18,19]}}},\n  \"succ_index\":[0,1,2,3,4,5,6,7,8,9],\n  \"insert_cnt\":10,\n  \"timestamp\":434575834238943233\n}\n","collection.load()\nsearch_param = {\n  \"data\": [[1.0, 1.0]],\n  \"anns_field\": \"example_field\",\n  \"param\": {\"metric_type\": \"L2\"},\n  \"limit\": 10,\n  \"travel_timestamp\": batch1.timestamp,\n}\nres = collection.search(**search_param)\nres[0].ids\n","await milvusClient.collectionManager.loadCollection({\n  collection_name: \"test_time_travel\",\n});\nconst res = await milvusClient.dataManager.search({\n  collection_name: \"test_time_travel\",\n  vectors: [\n    [1.0, 1.0]\n  ],\n  travel_timestamp: batch1.timestamp,\n  search_params: {\n    anns_field: \"example_field\",\n    topk: \"10\",\n    metric_type: \"L2\",\n    params: JSON.stringify({\n      nprobe: 10\n    }),\n  },\n  vector_type: 101, // DataType.FloatVector,\n});\nconsole.log(res1.results)\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","search\nCollection name (test_collection_query, test_time_travel): test_time_travel\nThe vectors of search data (the length of data is number of query (nq), the dim of every vector in data must be equal to vector fieldâ€™s of collection. You can also import a CSV file without headers): [[1.0, 1.0]]\nThe vector field used to search of collection (example_field): example_field\nThe specified number of decimal places of returned distance [-1]: \nThe max number of returned record, also known as topk: 10\nThe boolean expression used to filter attribute []: \nThe names of partitions to search (split by \",\" if multiple) ['_default'] []: \nTimeout []: \nGuarantee Timestamp(It instructs Milvus to see all operations performed before a provided timestamp. If no such timestamp is provided, then Milvus will search all operations performed to date) [0]: \nTravel Timestamp(Specify a timestamp in a search to get results based on a data view) [0]: 430390410783752199\n","# Load the collection:\ncurl -X 'POST' \\\n  'http://localhost:9091/api/v1/collection/load' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"test_time_travel\"\n  }'\n\n# Conduct a vector search:\ncurl -X 'POST' \\\n  'http://localhost:9091/api/v1/search' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"test_time_travel\",\n    \"output_fields\": [\"pk\"],\n    \"search_params\": [\n      {\"key\": \"anns_field\", \"value\": \"example_field\"},\n      {\"key\": \"topk\", \"value\": \"10\"},\n      {\"key\": \"params\", \"value\": \"{\\\"nprobe\\\": 10}\"},\n      {\"key\": \"metric_type\", \"value\": \"L2\"}\n    ],\n    \"travel_timestamp\": 434575831766925313,\n    \"vectors\": [ [10,10] ],\n    \"dsl_type\": 1\n  }'\n","[8, 7, 4, 2, 5, 6, 9, 3, 0, 1]\n","[8, 7, 4, 2, 5, 6, 9, 3, 0, 1]\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","Search results:\n\nNo.1:\n+---------+------+------------+-----------+\n|   Index |   ID |   Distance |     Score |\n+=========+======+============+===========+\n|       0 |    2 |  0.0563737 | 0.0563737 |\n+---------+------+------------+-----------+\n|       1 |    5 |  0.122474  | 0.122474  |\n+---------+------+------------+-----------+\n|       2 |    3 |  0.141737  | 0.141737  |\n+---------+------+------------+-----------+\n|       3 |    8 |  0.331008  | 0.331008  |\n+---------+------+------------+-----------+\n|       4 |    0 |  0.618705  | 0.618705  |\n+---------+------+------------+-----------+\n|       5 |    1 |  0.676788  | 0.676788  |\n+---------+------+------------+-----------+\n|       6 |    9 |  0.69871   | 0.69871   |\n+---------+------+------------+-----------+\n|       7 |    6 |  0.706456  | 0.706456  |\n+---------+------+------------+-----------+\n|       8 |    4 |  0.956929  | 0.956929  |\n+---------+------+------------+-----------+\n|       9 |    7 |  1.19445   | 1.19445   |\n+---------+------+------------+-----------+\n","{\n  \"status\":{},\n  \"results\":{\n    \"num_queries\":1,\n    \"top_k\":10,\n    \"fields_data\":[\n      {\n        \"type\":5,\n        \"field_name\":\"pk\",\n        \"Field\":{\"Scalars\":{\"Data\":{\"LongData\":{\"data\":[9,8,7,6,5,4,3,2,1,0]}}}},\n        \"field_id\":100\n      }\n    ],\n    \"scores\":[81,82,85,90,97,106,117,130,145,162],\n    \"ids\":{\"IdField\":{\"IntId\":{\"data\":[9,8,7,6,5,4,3,2,1,0]}}},\n    \"topks\":[10]\n  },\n  \"collection_name\":\"test_time_travel\"\n}\n","batch2.timestamp\n428828283406123011\nsearch_param = {\n    \"data\": [[1.0, 1.0]],\n    \"anns_field\": \"example_field\",\n    \"param\": {\"metric_type\": \"L2\"},\n    \"limit\": 10,\n    \"travel_timestamp\": batch2.timestamp,\n}\nres = collection.search(**search_param)\nres[0].ids\n[19, 10, 8, 7, 4, 17, 2, 5, 13, 15]\n","batch2.timestamp\n428828283406123011\nconst res2 = await milvusClient.dataManager.search({\n  collection_name: \"test_time_travel\",\n  vectors: [\n    [1.0, 1.0]\n  ],\n  travel_timestamp: batch2.timestamp,\n  search_params: {\n    anns_field: \"example_field\",\n    topk: \"10\",\n    metric_type: \"L2\",\n    params: JSON.stringify({\n      nprobe: 10\n    }),\n  },\n  vector_type: 101, // DataType.FloatVector,\n});\nconsole.log(res2.results)\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","search \nCollection name (test_collection_query, test_time_travel): test_time_travel\nThe vectors of search data (the length of data is number of query (nq), the dim of every vector in data must be equal to vector fieldâ€™s of collection. You can also import a CSV file without headers): [[1.0, 1.0]]\nThe vector field used to search of collection (example_field): example_field\nThe specified number of decimal places of returned distance [-1]: \nThe max number of returned record, also known as topk: 10\nThe boolean expression used to filter attribute []: \nThe names of partitions to search (split by \",\" if multiple) ['_default'] []: \nTimeout []: \nGuarantee Timestamp(It instructs Milvus to see all operations performed before a provided timestamp. If no such timestamp is provided, then Milvus will search all operations performed to date) [0]: \nTravel Timestamp(Specify a timestamp in a search to get results based on a data view) [0]: \nSearch results:\n\nNo.1:\n+---------+------+------------+------------+\n|   Index |   ID |   Distance |      Score |\n+=========+======+============+============+\n|       0 |   19 | 0          | 0          |\n+---------+------+------------+------------+\n|       1 |   12 | 0.00321393 | 0.00321393 |\n+---------+------+------------+------------+\n|       2 |    2 | 0.0563737  | 0.0563737  |\n+---------+------+------------+------------+\n|       3 |    5 | 0.122474   | 0.122474   |\n+---------+------+------------+------------+\n|       4 |    3 | 0.141737   | 0.141737   |\n+---------+------+------------+------------+\n|       5 |   10 | 0.238646   | 0.238646   |\n+---------+------+------------+------------+\n|       6 |    8 | 0.331008   | 0.331008   |\n+---------+------+------------+------------+\n|       7 |   18 | 0.403166   | 0.403166   |\n+---------+------+------------+------------+\n|       8 |   13 | 0.508617   | 0.508617   |\n+---------+------+------------+------------+\n|       9 |   11 | 0.531529   | 0.531529   |\n+---------+------+------------+------------+\n","curl -X 'POST' \\\n  'http://localhost:9091/api/v1/search' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"test_time_travel\",\n    \"output_fields\": [\"pk\"],\n    \"search_params\": [\n      {\"key\": \"anns_field\", \"value\": \"example_field\"},\n      {\"key\": \"topk\", \"value\": \"10\"},\n      {\"key\": \"params\", \"value\": \"{\\\"nprobe\\\": 10}\"},\n      {\"key\": \"metric_type\", \"value\": \"L2\"}\n    ],\n    \"vectors\": [ [11,11] ],\n    \"dsl_type\": 1\n  }'\n","{\n  \"status\":{},\n  \"results\":{\n    \"num_queries\":1,\n    \"top_k\":10,\n    \"fields_data\":[\n      {\n        \"type\":5,\n        \"field_name\":\"pk\",\n        \"Field\":{\"Scalars\":{\"Data\":{\"LongData\":{\"data\":[10,11,12,13,14,15,16,17,18,9]}}}},\n        \"field_id\":100\n      }\n    ],\n    \"scores\":[1,2,5,10,17,26,37,50,65,101],\n    \"ids\":{\"IdField\":{\"IntId\":{\"data\":[10,11,12,13,14,15,16,17,18,9]}}},\n    \"topks\":[10]\n  },\n  \"collection_name\":\"test_time_travel\"\n}\n","import datetime\ndatetime = datetime.datetime.now()\nfrom pymilvus import utility\npre_del_timestamp = utility.mkts_from_datetime(datetime)\n","const {  datetimeToHybrids } = require(\"@zilliz/milvus2-sdk-node/milvus/utils/Format\");\nconst datetime = new Date().getTime()\nconst pre_del_timestamp = datetimeToHybrids(datetime)\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","calc mkts_from_unixtime -e 1641809375\n430390476800000000\n","# This function is not supported. It is suggested to use Milvus_CLI.\n","expr = \"pk in [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\"\ncollection.delete(expr)\n","const expr = \"pk in [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\"\nawait milvusClient.dataManager.deleteEntities({\n  collection_name: \"test_time_travel\",\n  expr: expr,\n});\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","delete entities -c test_time_travel\nThe expression to specify entities to be deleted, such as \"film_id in [ 0, 1 ]\": pk in [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\nYou are trying to delete the entities of collection. This action cannot be undone!\n\nDo you want to continue? [y/N]: y\n(insert count: 0, delete count: 10, upsert count: 0, timestamp: 430390494161534983)\n","curl -X 'DELETE' \\\n  'http://localhost:9091/api/v1/entities' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"test_time_travel\",\n    \"expr\": \"pk in [0, 2, 4, 6, 8, 10, 12, 14, 16, 18]\"\n  }'\n","{\n  \"status\":{},\n  \"IDs\":{\"IdField\":{\"IntId\":{\"data\":[0,2,4,6,8,10,12,14,16,18]}}},\n  \"delete_cnt\":10,\n  \"timestamp\": 434575874068316161\n}\n","search_param = {\n    \"data\": [[1.0, 1.0]],\n    \"anns_field\": \"example_field\",\n    \"param\": {\"metric_type\": \"L2\"},\n    \"limit\": 10,\n}\nres = collection.search(**search_param)\nres[0].ids\n","const res3 = await milvusClient.dataManager.search({\n  collection_name: \"test_time_travel\",\n  vectors: [\n    [1.0, 1.0]\n  ],\n  search_params: {\n    anns_field: \"example_field\",\n    topk: \"10\",\n    metric_type: \"L2\",\n    params: JSON.stringify({\n      nprobe: 10\n    }),\n  },\n  vector_type: 101, // DataType.FloatVector,\n});\nconsole.log(res3.results)\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","search \nCollection name (test_collection_query, test_time_travel): test_time_travel\nThe vectors of search data (the length of data is number of query (nq), the dim of every vector in data must be equal to vector fieldâ€™s of collection. You can also import a CSV file without headers): [[1.0, 1.0]]\nThe vector field used to search of collection (example_field): example_field\nThe specified number of decimal places of returned distance [-1]: \nThe max number of returned record, also known as topk: 10\nThe boolean expression used to filter attribute []: \nThe names of partitions to search (split by \",\" if multiple) ['_default'] []: \nTimeout []: \nGuarantee Timestamp(It instructs Milvus to see all operations performed before a provided timestamp. If no such timestamp is provided, then Milvus will search all operations performed to date) [0]: \nTravel Timestamp(Specify a timestamp in a search to get results based on a data view) [0]: \nSearch results:\n\nNo.1:\n+---------+------+------------+----------+\n|   Index |   ID |   Distance |    Score |\n+=========+======+============+==========+\n|       0 |   19 |   0        | 0        |\n+---------+------+------------+----------+\n|       1 |    5 |   0.122474 | 0.122474 |\n+---------+------+------------+----------+\n|       2 |    3 |   0.141737 | 0.141737 |\n+---------+------+------------+----------+\n|       3 |   13 |   0.508617 | 0.508617 |\n+---------+------+------------+----------+\n|       4 |   11 |   0.531529 | 0.531529 |\n+---------+------+------------+----------+\n|       5 |   17 |   0.593702 | 0.593702 |\n+---------+------+------------+----------+\n|       6 |    1 |   0.676788 | 0.676788 |\n+---------+------+------------+----------+\n|       7 |    9 |   0.69871  | 0.69871  |\n+---------+------+------------+----------+\n|       8 |    7 |   1.19445  | 1.19445  |\n+---------+------+------------+----------+\n|       9 |   15 |   1.53964  | 1.53964  |\n+---------+------+------------+----------+\n","curl -X 'POST' \\\n  'http://localhost:9091/api/v1/search' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"test_time_travel\",\n    \"output_fields\": [\"pk\"],\n    \"search_params\": [\n      {\"key\": \"anns_field\", \"value\": \"example_field\"},\n      {\"key\": \"topk\", \"value\": \"10\"},\n      {\"key\": \"params\", \"value\": \"{\\\"nprobe\\\": 10}\"},\n      {\"key\": \"metric_type\", \"value\": \"L2\"}\n    ],\n    \"vectors\": [ [11,11] ],\n    \"dsl_type\": 1\n  }'\n","{\n  \"status\":{},\n  \"results\":{\n    \"num_queries\":1,\n    \"top_k\":10,\n    \"fields_data\":[\n      {\n        \"type\":5,\n        \"field_name\":\"pk\",\n        \"Field\":{\"Scalars\":{\"Data\":{\"LongData\":{\"data\":[11,13,15,17,9,7,5,3,1,19]}}}},\n        \"field_id\":100\n      }\n    ],\n    \"scores\":[2,10,26,50,101,109,125,149,181,200],\n    \"ids\":{\"IdField\":{\"IntId\":{\"data\":[11,13,15,17,9,7,5,3,1,19]}}},\n    \"topks\":[10]\n  },\n  \"collection_name\":\"test_time_travel\"\n}\n","search_param = {\n    \"data\": [[1.0, 1.0]],\n    \"anns_field\": \"example_field\",\n    \"param\": {\"metric_type\": \"L2\"},\n    \"limit\": 10,\n    \"travel_timestamp\": pre_del_timestamp,\n}\nres = collection.search(**search_param)\nres[0].ids\n","const res4 = await milvusClient.dataManager.search({\n  collection_name: \"test_time_travel\",\n  vectors: [\n    [1.0, 1.0]\n  ],\n  travel_timestamp: pre_del_timestamp,\n  search_params: {\n    anns_field: \"example_field\",\n    topk: \"10\",\n    metric_type: \"L2\",\n    params: JSON.stringify({\n      nprobe: 10\n    }),\n  },\n  vector_type: 101, // DataType.FloatVector,\n});\nconsole.log(res4.results)\n","// This function is under active development on the GO client.\n","// Java User Guide will be ready soon.\n","search \nCollection name (test_collection_query, test_time_travel): test_time_travel\nThe vectors of search data (the length of data is number of query (nq), the dim of every vector in data must be equal to vector fieldâ€™s of collection. You can also import a CSV file without headers): [[1.0, 1.0]]\nThe vector field used to search of collection (example_field): example_field\nThe specified number of decimal places of returned distance [-1]: \nThe max number of returned record, also known as topk: 10\nThe boolean expression used to filter attribute []: \nThe names of partitions to search (split by \",\" if multiple) ['_default'] []: \nTimeout []: \nGuarantee Timestamp(It instructs Milvus to see all operations performed before a provided timestamp. If no such timestamp is provided, then Milvus will search all operations performed to date) [0]: \nTravel Timestamp(Specify a timestamp in a search to get results based on a data view) [0]: 430390476800000000\nSearch results:\n\nNo.1:\n+---------+------+------------+------------+\n|   Index |   ID |   Distance |      Score |\n+=========+======+============+============+\n|       0 |   19 | 0          | 0          |\n+---------+------+------------+------------+\n|       1 |   12 | 0.00321393 | 0.00321393 |\n+---------+------+------------+------------+\n|       2 |    2 | 0.0563737  | 0.0563737  |\n+---------+------+------------+------------+\n|       3 |    5 | 0.122474   | 0.122474   |\n+---------+------+------------+------------+\n|       4 |    3 | 0.141737   | 0.141737   |\n+---------+------+------------+------------+\n|       5 |   10 | 0.238646   | 0.238646   |\n+---------+------+------------+------------+\n|       6 |    8 | 0.331008   | 0.331008   |\n+---------+------+------------+------------+\n|       7 |   18 | 0.403166   | 0.403166   |\n+---------+------+------------+------------+\n|       8 |   13 | 0.508617   | 0.508617   |\n+---------+------+------------+------------+\n|       9 |   11 | 0.531529   | 0.531529   |\n+---------+------+------------+------------+\n","curl -X 'POST' \\\n  'http://localhost:9091/api/v1/search' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"test_time_travel\",\n    \"output_fields\": [\"pk\"],\n    \"search_params\": [\n      {\"key\": \"anns_field\", \"value\": \"example_field\"},\n      {\"key\": \"topk\", \"value\": \"10\"},\n      {\"key\": \"params\", \"value\": \"{\\\"nprobe\\\": 10}\"},\n      {\"key\": \"metric_type\", \"value\": \"L2\"}\n    ],\n    \"travel_timestamp\": 434284782724317186,\n    \"vectors\": [ [10,10] ],\n    \"dsl_type\": 1\n  }'\n","{\n  \"status\":{},\n  \"results\":{\n    \"num_queries\":1,\n    \"top_k\":10,\n    \"fields_data\":[\n      {\n        \"type\":5,\n        \"field_name\":\"pk\",\n        \"Field\":{\"Scalars\":{\"Data\":{\"LongData\":{\"data\":[11,12,13,14,15,16,17,18,10,9]}}}},\n        \"field_id\":100}\n    ],\n    \"scores\":[5,8,13,20,29,40,53,68,81,82],\n    \"ids\":{\"IdField\":{\"IntId\":{\"data\":[11,12,13,14,15,16,17,18,10,9]}}},\n    \"topks\":[10]\n  },\n  \"collection_name\":\"test_time_travel\"\n}\n"],"headingContent":"","anchorList":[{"label":"Search with Time Travel","href":"Search-with-Time-Travel","type":1,"isActive":false},{"label":"Preparations","href":"Preparations","type":2,"isActive":false},{"label":"Insert the first batch of data","href":"Insert-the-first-batch-of-data","type":2,"isActive":false},{"label":"Check the timestamp of the first data batch","href":"Check-the-timestamp-of-the-first-data-batch","type":2,"isActive":false},{"label":"Insert the second batch of data","href":"Insert-the-second-batch-of-data","type":2,"isActive":false},{"label":"Search with a specified timestamp","href":"Search-with-a-specified-timestamp","type":2,"isActive":false},{"label":"Generate a timestamp for search","href":"Generate-a-timestamp-for-search","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}