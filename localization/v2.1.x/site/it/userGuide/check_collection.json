{"codeList":["from pymilvus import utility\nutility.has_collection(\"book\")\n","await milvusClient.collectionManager.hasCollection({\n  collection_name: \"book\",\n});\n","hasColl, err := milvusClient.HasCollection(\n  context.Background(), // ctx\n  collectionName,       // CollectionName\n)\nif err != nil {\n  log.Fatal(\"failed to check whether collection exists:\", err.Error())\n}\nlog.Println(hasColl)\n","R<Boolean> respHasCollection = milvusClient.hasCollection(\n  HasCollectionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build()\n);\nif (respHasCollection.getData() == Boolean.TRUE) {\n  System.out.println(\"Collection exists.\");\n}\n","describe collection -c book\n","curl -X 'GET' \\\n  'http://localhost:9091/api/v1/collection/existence' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"book\"\n  }'\n","{\n  \"status\":{},\n  \"value\":true\n}\n","from pymilvus import Collection\ncollection = Collection(\"book\")  # Get an existing collection.\n\ncollection.schema                # Return the schema.CollectionSchema of the collection.\ncollection.description           # Return the description of the collection.\ncollection.name                  # Return the name of the collection.\ncollection.is_empty              # Return the boolean value that indicates if the collection is empty.\ncollection.num_entities          # Return the number of entities in the collection.\ncollection.primary_field         # Return the schema.FieldSchema of the primary key field.\ncollection.partitions            # Return the list[Partition] object.\ncollection.indexes               # Return the list[Index] object.\n","await milvusClient.collectionManager.describeCollection({          // Return the name and schema of the collection.\n  collection_name: \"book\",\n});\n\nawait milvusClient.collectionManager.getCollectionStatistics({     // Return the statistics information of the collection.\n  collection_name: \"book\",\n});\n","collDesc, err := milvusClient.DescribeCollection(               // Return the name and schema of the collection.\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n)\nif err != nil {\n  log.Fatal(\"failed to check collection schema:\", err.Error())\n}\nlog.Printf(\"%v\\n\", collDesc)\n\ncollStat, err := milvusClient.GetCollectionStatistics(          // Return the statistics information of the collection.\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n)\nif err != nil {\n  log.Fatal(\"failed to check collection statistics:\", err.Error())\n}\n","R<DescribeCollectionResponse> respDescribeCollection = milvusClient.describeCollection(\n  // Return the name and schema of the collection.\n  DescribeCollectionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build()\n);\nDescCollResponseWrapper wrapperDescribeCollection = new DescCollResponseWrapper(respDescribeCollection.getData());\nSystem.out.println(wrapperDescribeCollection);\n\nR<GetCollectionStatisticsResponse> respCollectionStatistics = milvusClient.getCollectionStatistics(\n  // Return the statistics information of the collection.\n  GetCollectionStatisticsParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build()\n  );\nGetCollStatResponseWrapper wrapperCollectionStatistics = new GetCollStatResponseWrapper(respCollectionStatistics.getData());\nSystem.out.println(\"Collection row count: \" + wrapperCollectionStatistics.getRowCount());\n","describe collection -c book\n","curl -X 'GET' \\\n  'http://localhost:9091/api/v1/collection' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"collection_name\": \"book\"\n  }'\n","{\n  \"status\": {},\n  \"schema\": {\n    \"name\": \"book\",\n    \"description\": \"Test book search\",\n    \"fields\": [\n      {\n        \"fieldID\": 100,\n        \"name\": \"book_id\",\n        \"is_primary_key\": true,\n        \"description\": \"book id\",\n        \"data_type\": 5\n      },\n      {\n        \"fieldID\": 101,\n        \"name\": \"book_intro\",\n        \"description\": \"embedded vector of book introduction\",\n        \"data_type\": 101,\n        \"type_params\": [\n          {\n            \"key\": \"dim\",\n            \"value\": \"2\"\n          }\n        ]\n      }\n    ]\n  },\n  \"collectionID\": 434240188610972993,\n  \"virtual_channel_names\": [\n    \"by-dev-rootcoord-dml_0_434240188610972993v0\",\n    \"by-dev-rootcoord-dml_1_434240188610972993v1\"\n  ],\n  \"physical_channel_names\": [\n    \"by-dev-rootcoord-dml_0\",\n    \"by-dev-rootcoord-dml_1\"\n  ],\n  \"created_timestamp\": 434240188610772994,\n  \"created_utc_timestamp\": 1656494860118,\n  \"shards_num\": 2,\n  \"consistency_level\": 1\n}\n","from pymilvus import utility\nutility.list_collections()\n","await milvusClient.collectionManager.showCollections();\n","listColl, err := milvusClient.ListCollections(\n  context.Background(),   // ctx\n)\nif err != nil {\n  log.Fatal(\"failed to list all collections:\", err.Error())\n}\nlog.Println(listColl)\n","R<ShowCollectionsResponse> respShowCollections = milvusClient.showCollections(\n    ShowCollectionsParam.newBuilder().build()\n  );\nSystem.out.println(respShowCollections);\n","list collections\n","curl -X 'GET' \\\n  'http://localhost:9091/api/v1/collections' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json'\n","{\n  \"status\": {},\n  \"collection_names\": [\n    \"book\"\n  ],\n  \"collection_ids\": [\n    434240188610972993\n  ],\n  \"created_timestamps\": [\n    434240188610772994\n  ],\n  \"created_utc_timestamps\": [\n    1656494860118\n  ]\n}\n"],"headingContent":"","anchorList":[{"label":"Check Collection Information","href":"Check-Collection-Information","type":1,"isActive":false},{"label":"Check if a collection exists","href":"Check-if-a-collection-exists","type":2,"isActive":false},{"label":"Check collection details","href":"Check-collection-details","type":2,"isActive":false},{"label":"List all collections","href":"List-all-collections","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}