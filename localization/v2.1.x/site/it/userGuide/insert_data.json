{"codeList":["import random\ndata = [\n  [i for i in range(2000)],\n  [str(i) for i in range(2000)],\n  [i for i in range(10000, 12000)],\n  [[random.random() for _ in range(2)] for _ in range(2000)],\n]\n","const data = Array.from({ length: 2000 }, (v,k) => ({\n  \"book_id\": k,\n  \"word_count\": k+10000,\n  \"book_intro\": Array.from({ length: 2 }, () => Math.random()),\n}));\n","bookIDs := make([]int64, 0, 2000)\nwordCounts := make([]int64, 0, 2000)\nbookIntros := make([][]float32, 0, 2000)\nfor i := 0; i < 2000; i++ {\n    bookIDs = append(bookIDs, int64(i))\n    wordCounts = append(wordCounts, int64(i+10000))\n    v := make([]float32, 0, 2)\n    for j := 0; j < 2; j++ {\n        v = append(v, rand.Float32())\n    }\n    bookIntros = append(bookIntros, v)\n}\nidColumn := entity.NewColumnInt64(\"book_id\", bookIDs)\nwordColumn := entity.NewColumnInt64(\"word_count\", wordCounts)\nintroColumn := entity.NewColumnFloatVector(\"book_intro\", 2, bookIntros)\n","Random ran = new Random();\nList<Long> book_id_array = new ArrayList<>();\nList<Long> word_count_array = new ArrayList<>();\nList<List<Float>> book_intro_array = new ArrayList<>();\nfor (long i = 0L; i < 2000; ++i) {\n    book_id_array.add(i);\n    word_count_array.add(i + 10000);\n    List<Float> vector = new ArrayList<>();\n    for (int k = 0; k < 2; ++k) {\n        vector.add(ran.nextFloat());\n    }\n    book_intro_array.add(vector);\n}\n","# Prepare your data in a CSV file. Milvus CLI only supports importing data from local or remote files.\n","# See the following step.\n","from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\nmr = collection.insert(data)\n","const mr = await milvusClient.dataManager.insert({\n  collection_name: \"book\",\n  fields_data: data,\n});\n","_, err = milvusClient.Insert(\n    context.Background(), // ctx\n    \"book\",               // CollectionName\n    \"\",                   // partitionName\n    idColumn,             // columnarData\n    wordColumn,           // columnarData\n    introColumn,          // columnarData\n)\nif err != nil {\n    log.Fatal(\"failed to insert data:\", err.Error())\n}\n","List<InsertParam.Field> fields = new ArrayList<>();\nfields.add(new InsertParam.Field(\"book_id\", DataType.Int64, book_id_array));\nfields.add(new InsertParam.Field(\"word_count\", DataType.Int64, word_count_array));\nfields.add(new InsertParam.Field(\"book_intro\", DataType.FloatVector, book_intro_array));\n\nInsertParam insertParam = InsertParam.newBuilder()\n  .withCollectionName(\"book\")\n  .withPartitionName(\"novel\")\n  .withFields(fields)\n  .build();\nmilvusClient.insert(insertParam);\n","import -c book 'https://raw.githubusercontent.com/milvus-io/milvus_cli/main/examples/user_guide/search.csv'\n","curl -X 'POST' \\\n  'http://localhost:9091/api/v1/entities' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"collection_name\": \"book\",\n  \"fields_data\": [\n    {\n      \"field_name\": \"book_id\",\n      \"type\": 5,\n      \"field\": [\n        1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100\n      ]\n    },\n    {\n      \"field_name\": \"word_count\",\n      \"type\": 5,\n      \"field\": [\n        1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,13000,14000,15000,16000,17000,18000,19000,20000,21000,22000,23000,24000,25000,26000,27000,28000,29000,30000,31000,32000,33000,34000,35000,36000,37000,38000,39000,40000,41000,42000,43000,44000,45000,46000,47000,48000,49000,50000,51000,52000,53000,54000,55000,56000,57000,58000,59000,60000,61000,62000,63000,64000,65000,66000,67000,68000,69000,70000,71000,72000,73000,74000,75000,76000,77000,78000,79000,80000,81000,82000,83000,84000,85000,86000,87000,88000,89000,90000,91000,92000,93000,94000,95000,96000,97000,98000,99000,100000\n      ]\n    },\n    {\n      \"field_name\": \"book_intro\",\n      \"type\": 101,\n      \"field\": [\n        [1,1],[2,1],[3,1],[4,1],[5,1],[6,1],[7,1],[8,1],[9,1],[10,1],[11,1],[12,1],[13,1],[14,1],[15,1],[16,1],[17,1],[18,1],[19,1],[20,1],[21,1],[22,1],[23,1],[24,1],[25,1],[26,1],[27,1],[28,1],[29,1],[30,1],[31,1],[32,1],[33,1],[34,1],[35,1],[36,1],[37,1],[38,1],[39,1],[40,1],[41,1],[42,1],[43,1],[44,1],[45,1],[46,1],[47,1],[48,1],[49,1],[50,1],[51,1],[52,1],[53,1],[54,1],[55,1],[56,1],[57,1],[58,1],[59,1],[60,1],[61,1],[62,1],[63,1],[64,1],[65,1],[66,1],[67,1],[68,1],[69,1],[70,1],[71,1],[72,1],[73,1],[74,1],[75,1],[76,1],[77,1],[78,1],[79,1],[80,1],[81,1],[82,1],[83,1],[84,1],[85,1],[86,1],[87,1],[88,1],[89,1],[90,1],[91,1],[92,1],[93,1],[94,1],[95,1],[96,1],[97,1],[98,1],[99,1],[100,1]\n      ]\n    }\n  ],\n  \"num_rows\": 100\n}'\n","{\n  \"status\":{},\n  \"IDs\":{\n    \"IdField\":{\n      \"IntId\":{\"data\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n      }\n    }\n  },\n  \"succ_index\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99],\n  \"insert_cnt\":100,\n  \"timestamp\":434262073374408706\n}\n"],"headingContent":"","anchorList":[{"label":"Insert Data","href":"Insert-Data","type":1,"isActive":false},{"label":"Prepare data","href":"Prepare-data","type":2,"isActive":false},{"label":"Insert data to Milvus","href":"Insert-data-to-Milvus","type":2,"isActive":false},{"label":"Limits","href":"Limits","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}