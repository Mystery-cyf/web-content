{"codeList":["client = MilvusClient(\"http://localhost:19530\")\n\nschema = MilvusClient.create_schema(\n    auto_id=False,\n    enable_dynamic_field=True\n)\n\nschema.add_field(field_name=\"id\", datatype=DataType.INT64, is_primary=True)\nschema.add_field(field_name=\"vector\", datatype=DataType.FLOAT_VECTOR, dim=768)\nschema.add_field(field_name=\"scalar_1\", datatype=DataType.VARCHAR, max_length=512)\nschema.add_field(field_name=\"scalar_2\", datatype=DataType.INT64)\n\nclient.create_collection(\n    collection_name=\"quick_setup\",\n    schema=schema\n)\n","import io.milvus.client.MilvusServiceClient;\nimport io.milvus.param.ConnectParam;\nimport io.milvus.grpc.DataType;\nimport io.milvus.param.collection.CollectionSchemaParam;\nimport io.milvus.param.collection.CollectionSchemaParam;\nimport io.milvus.param.collection.FieldType;\n\nfinal MilvusServiceClient milvusClient = new MilvusServiceClient(\nConnectParam.newBuilder()\n    .withUri(\"localhost:19530\")\n    .withToken(\"root:Milvus\")\n    .build()\n);\n\n// Define schema for the target collection\nFieldType id = FieldType.newBuilder()\n    .withName(\"id\")\n    .withDataType(DataType.Int64)\n    .withPrimaryKey(true)\n    .withAutoID(false)\n    .build();\n\nFieldType vector = FieldType.newBuilder()\n    .withName(\"vector\")\n    .withDataType(DataType.FloatVector)\n    .withDimension(768)\n    .build();\n\nFieldType scalar1 = FieldType.newBuilder()\n    .withName(\"scalar_1\")\n    .withDataType(DataType.VarChar)\n    .withMaxLength(512)\n    .build();\n\nFieldType scalar2 = FieldType.newBuilder()\n    .withName(\"scalar_2\")\n    .withDataType(DataType.Int64)\n    .build();\n\nCollectionSchemaParam schema = CollectionSchemaParam.newBuilder()\n    .withEnableDynamicField(true)\n    .addFieldType(id)\n    .addFieldType(vector)\n    .addFieldType(scalar1)\n    .addFieldType(scalar2)\n    .build();\n\n// Create a collection with the given schema\nmilvusClient.createCollection(CreateCollectionParam.newBuilder()\n    .withCollectionName(\"quick_setup\")\n    .withSchema(schema)\n    .build()\n);\n","export MILVUS_URI=\"localhost:19530\"\n\ncurl --request POST \"http://${MILVUS_URI}/v2/vectordb/jobs/import/create\" \\\n--header \"Content-Type: application/json\" \\\n--data-raw '{\n    \"files\": [\n        [\n            \"/8ca44f28-47f7-40ba-9604-98918afe26d1/1.parquet\"\n        ],\n        [\n            \"/8ca44f28-47f7-40ba-9604-98918afe26d1/2.parquet\"\n        ]\n    ],\n    \"collectionName\": \"quick_setup\"\n}'\n","[\n    \"/d1782fa1-6b65-4ff3-b05a-43a436342445/1.json\"\n],\n","[\n    \"/a6fb2d1c-7b1b-427c-a8a3-178944e3b66d/1.parquet\"\n]\n\n","{\n    \"code\": 200,\n    \"data\": {\n        \"jobId\": \"448707763884413158\"\n    }\n}\n","export MILVUS_URI=\"localhost:19530\"\n\ncurl --request POST \"http://${MILVUS_URI}/v2/vectordb/jobs/import/get_progress\" \\\n--header \"Content-Type: application/json\" \\\n--data-raw '{\n    \"jobId\": \"449839014328146739\"\n}'\n","{\n    \"code\": 200,\n    \"data\": {\n        \"collectionName\": \"quick_setup\",\n        \"completeTime\": \"2024-05-18T02:57:13Z\",\n        \"details\": [\n            {\n                \"completeTime\": \"2024-05-18T02:57:11Z\",\n                \"fileName\": \"id:449839014328146740 paths:\\\"/8ca44f28-47f7-40ba-9604-98918afe26d1/1.parquet\\\" \",\n                \"fileSize\": 31567874,\n                \"importedRows\": 100000,\n                \"progress\": 100,\n                \"state\": \"Completed\",\n                \"totalRows\": 100000\n            },\n            {\n                \"completeTime\": \"2024-05-18T02:57:11Z\",\n                \"fileName\": \"id:449839014328146741 paths:\\\"/8ca44f28-47f7-40ba-9604-98918afe26d1/2.parquet\\\" \",\n                \"fileSize\": 31517224,\n                \"importedRows\": 100000,\n                \"progress\": 100,\n                \"state\": \"Completed\",\n                \"totalRows\": 200000            \n            }\n        ],\n        \"fileSize\": 63085098,\n        \"importedRows\": 200000,\n        \"jobId\": \"449839014328146739\",\n        \"progress\": 100,\n        \"state\": \"Completed\",\n        \"totalRows\": 200000\n    }\n}\n","export MILVUS_URI=\"localhost:19530\"\n\ncurl --request POST \"http://${MILVUS_URI}/v2/vectordb/jobs/import/list\" \\\n--header \"Content-Type: application/json\" \\\n--data-raw '{\n    \"collectionName\": \"quick_setup\"\n}'\n","{\n    \"code\": 200,\n    \"data\": {\n        \"records\": [\n            {\n                \"collectionName\": \"quick_setup\",\n                \"jobId\": \"448761313698322011\",\n                \"progress\": 50,\n                \"state\": \"Importing\"\n            }\n        ]\n    }\n}\n"],"headingContent":"","anchorList":[{"label":"导入数据","href":"Import-data","type":1,"isActive":false},{"label":"开始之前","href":"Before-you-start","type":2,"isActive":false},{"label":"导入数据","href":"Import-data","type":2,"isActive":false},{"label":"检查导入进度","href":"Check-import-progress","type":2,"isActive":false},{"label":"列出导入任务","href":"List-Import-Jobs","type":2,"isActive":false}]}