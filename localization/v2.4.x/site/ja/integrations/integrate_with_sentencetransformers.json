{"codeList":["pip install pymilvus sentence-transformers gdown\n","import gdown\nurl = 'https://drive.google.com/uc?id=11ISS45aO2ubNCGaC3Lvd3D7NT8Y7MeO8'\noutput = './movies.zip'\ngdown.download(url, output)\n\nimport zipfile\n\nwith zipfile.ZipFile(\"./movies.zip\",\"r\") as zip_ref:\n    zip_ref.extractall(\"./movies\")\n","# Milvus Setup Arguments\nCOLLECTION_NAME = 'movies_db'  # Collection name\nDIMENSION = 384  # Embeddings size\nCOUNT = 1000  # Number of vectors to insert\nMILVUS_HOST = 'localhost'\nMILVUS_PORT = '19530'\n\n# Inference Arguments\nBATCH_SIZE = 128\n\n# Search Arguments\nTOP_K = 3\n","from pymilvus import connections\n\n# Connect to Milvus Database\nconnections.connect(host=MILVUS_HOST, port=MILVUS_PORT)\n","from pymilvus import utility\n\n# Remove any previous collections with the same name\nif utility.has_collection(COLLECTION_NAME):\n    utility.drop_collection(COLLECTION_NAME)\n","from pymilvus import FieldSchema, CollectionSchema, DataType, Collection\n\n\n# Create collection which includes the id, title, and embedding.\nfields = [\n    FieldSchema(name='id', dtype=DataType.INT64, is_primary=True, auto_id=True),\n    FieldSchema(name='title', dtype=DataType.VARCHAR, max_length=200),  # VARCHARS need a maximum length, so for this example they are set to 200 characters\n    FieldSchema(name='embedding', dtype=DataType.FLOAT_VECTOR, dim=DIMENSION)\n]\nschema = CollectionSchema(fields=fields)\ncollection = Collection(name=COLLECTION_NAME, schema=schema)\n","# Create an IVF_FLAT index for collection.\nindex_params = {\n    'metric_type':'L2',\n    'index_type':\"IVF_FLAT\",\n    'params':{'nlist': 1536}\n}\ncollection.create_index(field_name=\"embedding\", index_params=index_params)\ncollection.load()\n","import csv\nfrom sentence_transformers import SentenceTransformer\n\ntransformer = SentenceTransformer('all-MiniLM-L6-v2')\n\n# Extract the book titles\ndef csv_load(file):\n    with open(file, newline='') as f:\n        reader = csv.reader(f, delimiter=',')\n        for row in reader:\n            if '' in (row[1], row[7]):\n                continue\n            yield (row[1], row[7])\n\n\n# Extract embedding from text using OpenAI\ndef embed_insert(data):\n    embeds = transformer.encode(data[1]) \n    ins = [\n            data[0],\n            [x for x in embeds]\n    ]\n    collection.insert(ins)\n\nimport time\n\ndata_batch = [[],[]]\n\ncount = 0\n\nfor title, plot in csv_load('./movies/plots.csv'):\n    if count <= COUNT:\n        data_batch[0].append(title)\n        data_batch[1].append(plot)\n        if len(data_batch[0]) % BATCH_SIZE == 0:\n            embed_insert(data_batch)\n            data_batch = [[],[]]\n        count += 1\n    else:\n        break\n\n# Embed and insert the remainder\nif len(data_batch[0]) != 0:\n    embed_insert(data_batch)\n\n# Call a flush to index any unsealed segments.\ncollection.flush()\n","# Search for titles that closest match these phrases.\nsearch_terms = ['A movie about cars', 'A movie about monsters']\n\n# Search the database based on input text\ndef embed_search(data):\n    embeds = transformer.encode(data) \n    return [x for x in embeds]\n\nsearch_data = embed_search(search_terms)\n\nstart = time.time()\nres = collection.search(\n    data=search_data,  # Embeded search value\n    anns_field=\"embedding\",  # Search across embeddings\n    param={},\n    limit = TOP_K,  # Limit to top_k results per search\n    output_fields=['title']  # Include title field in result\n)\nend = time.time()\n\nfor hits_i, hits in enumerate(res):\n    print('Title:', search_terms[hits_i])\n    print('Search Time:', end-start)\n    print('Results:')\n    for hit in hits:\n        print( hit.entity.get('title'), '----', hit.distance)\n    print()\n","Title: A movie about cars\nSearch Time: 0.08636689186096191\nResults:\nYouth's Endearing Charm ---- 1.0954499244689941\nFrom Leadville to Aspen: A Hold-Up in the Rockies ---- 1.1019384860992432\nGentlemen of Nerve ---- 1.1331942081451416\n\nTitle: A movie about monsters\nSearch Time: 0.08636689186096191\nResults:\nThe Suburbanite ---- 1.0666425228118896\nYouth's Endearing Charm ---- 1.1072258949279785\nThe Godless Girl ---- 1.1511223316192627\n"],"headingContent":"","anchorList":[{"label":"MilvusとSentenceTransformersを使った映画検索","href":"Movie-Search-Using-Milvus-and-SentenceTransformers","type":1,"isActive":false},{"label":"要件のインストール","href":"Installing-requirements","type":2,"isActive":false},{"label":"データの取得","href":"Grabbing-the-data","type":2,"isActive":false},{"label":"グローバル・パラメーター","href":"Global-parameters","type":2,"isActive":false},{"label":"Milvusのセットアップ","href":"Setting-up-Milvus","type":2,"isActive":false},{"label":"データの挿入","href":"Inserting-the-data","type":2,"isActive":false},{"label":"検索の実行","href":"Performing-the-search","type":2,"isActive":false}]}