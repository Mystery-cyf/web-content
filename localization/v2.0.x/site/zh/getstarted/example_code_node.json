{"codeList":["npm init\n","npm install @zilliz/milvus2-sdk-node typescript --save\n","$ wget https://raw.githubusercontent.com/milvus-io/milvus-sdk-node/main/example/HelloMilvus.ts\n","import { MilvusClient } from \"@zilliz/milvus2-sdk-node\"\nimport { DataType } from \"@zilliz/milvus2-sdk-node/dist/milvus/types/Common\";\nimport { InsertReq } from \"@zilliz/milvus2-sdk-node/dist/milvus/types/Insert\";\n","const milvusClient = new MilvusClient(\"localhost:19530\");\nconst collectionManager = milvusClient.collectionManager;\n","const collectionName = \"hello_milvus\";\n    const dim = \"4\";\n    const createRes = await collectionManager.createCollection(\n        {\n            collection_name: collectionName,\n            fields: [\n                {\n                    name: \"count\",\n                    data_type: DataType.Int64,\n                    is_primary_key: true,\n                    description: \"\",\n                }, \n                {\n                    name: \"random_value\",\n                    data_type: DataType.Double,\n                    description: \"\",\n                }, \n                {\n                    name: \"float_vector\",\n                    data_type: DataType.FloatVector,\n                    description: \"\",\n                    type_params: {\n                      dim\n                    }\n                }\n            ]\n          }\n    );\n\n\n    console.log(\"--- Create collection ---\", createRes, collectionName);\n","const generateInsertData = function generateInsertData(\n  fields: { isVector: boolean; dim?: number; name: string; isBool?: boolean }[],\n  count: number) {\n    const results = [];\n    while (count > 0) {\n      let value: any = {};\n  \n      fields.forEach((v) => {\n        const { isVector, dim, name, isBool } = v;\n        value[name] = isVector\n          ? [...Array(dim)].map(() => Math.random() * 10)\n          : isBool\n          ? count % 2 === 0\n          : count;\n      });\n\n      value[\"count\"] = count;\n      results.push(value);\n      count--;\n    }\n    return results;\n}\n\n    const fields = [\n      {\n        isVector: true,\n        dim: 4,\n        name: \"float_vector\",\n      },\n      {\n        isVector: false,\n        name: \"random_value\",\n      },\n    ];\n    const vectorsData = generateInsertData(fields, 1000);\n  \n    const params: InsertReq = {\n      collection_name: collectionName,\n      fields_data: vectorsData,\n      partition_name: \"test\",\n    };\n  \n    await milvusClient.dataManager.insert(params);\n    console.log(\"--- Insert Data to Collection ---\");\n","    await milvusClient.indexManager.createIndex({\n      collection_name: collectionName,\n      field_name: \"float_vector\",\n      extra_params: {\n        index_type: \"IVF_FLAT\",\n        metric_type: \"L2\",\n        params: JSON.stringify({ nlist: 10 }),\n      },\n    });\n    console.log(\"--- Create Index in Collection ---\");\n","        // need load collection before search\n    const loadCollectionRes = await collectionManager.loadCollectionSync({\n      collection_name: collectionName,\n    });\n    console.log(\"--- Load collection (\" + collectionName + \") ---\", loadCollectionRes);\n\n\n    const result = await milvusClient.dataManager.search({\n      collection_name: collectionName,\n      vectors: [vectorsData[0][\"float_vector\"]],\n      search_params: {\n        anns_field: \"float_vector\",\n        topk: \"4\",\n        metric_type: \"L2\",\n        params: JSON.stringify({ nprobe: 1024 }),\n        round_decimal: 4,\n      },\n      output_fields: [\"count\"],\n      vector_type: DataType.FloatVector,\n    });\n\n    console.log(\"--- Search collection (\" + collectionName + \") ---\", result);\n","    const releaseRes = await collectionManager.releaseCollection({\n      collection_name: collectionName,\n    });\n    console.log(\"--- Release Collection ---\", releaseRes);\n","    const dropRes = await collectionManager.dropCollection({\n      collection_name: collectionName,\n    });\n    console.log(\"--- Drop Collection ---\", dropRes);\n","tsc MilvusHello.ts\n","node MilvusHello.ts\n"],"headingContent":"","anchorList":[{"label":"Run Milvus using Node.js","href":"Run-Milvus-using-Nodejs","type":1,"isActive":false},{"label":"1.  Initialize a Node.js Project","href":"1--Initialize-a-Nodejs-Project","type":2,"isActive":false},{"label":"2.  Install TypeScript and Node Milvus SDK and its dependencies","href":"2--Install-TypeScript-and-Node-Milvus-SDK-and-its-dependencies","type":2,"isActive":false},{"label":"3. Download sample code HelloMilvus.ts","href":"3-Download-sample-code-HelloMilvusts","type":2,"isActive":false},{"label":"4. Scan HelloMilvus.ts","href":"4-Scan-HelloMilvusts","type":2,"isActive":false},{"label":"5. Compile the file","href":"5-Compile-the-file","type":2,"isActive":false},{"label":"6. Run the example","href":"6-Run-the-example","type":2,"isActive":false}]}