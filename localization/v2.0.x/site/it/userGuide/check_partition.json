{"codeList":["from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.has_partition(\"novel\")\n","await milvusClient.partitionManager.hasPartition({\n  collection_name: \"book\",\n  partition_name: \"novel\",\n});\n","hasPar, err := milvusClient.HasPartition(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  \"novel\",                // partitionName\n)\nif err != nil {\n  log.Fatal(\"failed to check the partition:\", err.Error())\n}\nlog.Println(hasPar)\n","R<Boolean> respHasPartition = milvusClient.hasPartition(\n  HasPartitionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .withPartitionName(\"novel\")\n    .build()\n);\nif (respHasPartition.getData() == Boolean.TRUE) {\n  System.out.println(\"Partition exists.\");\n}\n","describe partition -c book -p novel\n","from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.partitions\n","await milvusClient.partitionManager.showPartitions({\n  collection_name: \"book\",\n});\n","listPar, err := milvusClient.ShowPartitions(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n)\nif err != nil {\n  log.Fatal(\"failed to list partitions:\", err.Error())\n}\nlog.Println(listPar)\n","R<ShowPartitionsResponse> respShowPartitions = milvusClient.showPartitions(\n  ShowPartitionsParam.newBuilder()\n          .withCollectionName(\"book\")\n          .build()\n);\nSystem.out.println(respShowPartitions);\n","list partitions -c book\n"],"headingContent":"","anchorList":[{"label":"Check Partition Information","href":"Check-Partition-Information","type":1,"isActive":false},{"label":"Verify if a partition exists","href":"Verify-if-a-partition-exists","type":2,"isActive":false},{"label":"List all partitions","href":"List-all-partitions","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}