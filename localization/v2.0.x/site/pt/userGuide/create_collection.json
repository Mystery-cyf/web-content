{"codeList":["from pymilvus import CollectionSchema, FieldSchema, DataType\nbook_id = FieldSchema(\n  name=\"book_id\", \n  dtype=DataType.INT64, \n  is_primary=True, \n)\nword_count = FieldSchema(\n  name=\"word_count\", \n  dtype=DataType.INT64,  \n)\nbook_intro = FieldSchema(\n  name=\"book_intro\", \n  dtype=DataType.FLOAT_VECTOR, \n  dim=2\n)\nschema = CollectionSchema(\n  fields=[book_id, word_count, book_intro], \n  description=\"Test book search\"\n)\ncollection_name = \"book\"\n","const params = {\n  collection_name: \"book\",\n  description: \"Test book search\",\n  fields: [\n    {\n      name: \"book_intro\",\n      description: \"\",\n      data_type: 101,  // DataType.FloatVector\n      type_params: {\n        dim: \"2\",\n      },\n    },\n    {\n      name: \"book_id\",\n      data_type: 5,   //DataType.Int64\n      is_primary_key: true,\n      description: \"\",\n    },\n    {\n      name: \"word_count\",\n      data_type: 5,    //DataType.Int64\n      description: \"\",\n    },\n  ],\n};\n","var (\n        collectionName = \"book\"\n    )\nschema := &entity.Schema{\n  CollectionName: collectionName,\n  Description:    \"Test book search\",\n  Fields: []*entity.Field{\n    {\n      Name:       \"book_id\",\n      DataType:   entity.FieldTypeInt64,\n      PrimaryKey: true,\n      AutoID:     false,\n    },\n    {\n      Name:       \"word_count\",\n      DataType:   entity.FieldTypeInt64,\n      PrimaryKey: false,\n      AutoID:     false,\n    },\n    {\n      Name:     \"book_intro\",\n      DataType: entity.FieldTypeFloatVector,\n      TypeParams: map[string]string{\n          \"dim\": \"2\",\n      },\n    },\n  },\n}\n","FieldType fieldType1 = FieldType.newBuilder()\n        .withName(\"book_id\")\n        .withDataType(DataType.Int64)\n        .withPrimaryKey(true)\n        .withAutoID(false)\n        .build();\nFieldType fieldType2 = FieldType.newBuilder()\n        .withName(\"word_count\")\n        .withDataType(DataType.Int64)\n        .build();\nFieldType fieldType3 = FieldType.newBuilder()\n        .withName(\"book_intro\")\n        .withDataType(DataType.FloatVector)\n        .withDimension(2)\n        .build();\nCreateCollectionParam createCollectionReq = CreateCollectionParam.newBuilder()\n        .withCollectionName(\"book\")\n        .withDescription(\"Test book search\")\n        .withShardsNum(2)\n        .addFieldType(fieldType1)\n        .addFieldType(fieldType2)\n        .addFieldType(fieldType3)\n        .build();\n","create collection -c book -f book_id:INT64 -f word_count:INT64 -f book_intro:FLOAT_VECTOR:2 -p book_id\n","from pymilvus import Collection\ncollection = Collection(\n    name=collection_name, \n    schema=schema, \n    using='default', \n    shards_num=2,\n    consistency_level=\"Strong\"\n    )\n","await milvusClient.collectionManager.createCollection(params);\n","err = milvusClient.CreateCollection(\n    context.Background(), // ctx\n    schema,\n    2, // shardNum\n)\nif err != nil {\n    log.Fatal(\"failed to create collection:\", err.Error())\n}\n","milvusClient.createCollection(createCollectionReq);\n","# Follow the previous step.\n"],"headingContent":"","anchorList":[{"label":"Create a Collection","href":"Create-a-Collection","type":1,"isActive":false},{"label":"Prepare Schema","href":"Prepare-Schema","type":2,"isActive":false},{"label":"Create a collection with the schema","href":"Create-a-collection-with-the-schema","type":2,"isActive":false},{"label":"Limits","href":"Limits","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}