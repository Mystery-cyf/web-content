{"codeList":["import random\ndata = [\n  [i for i in range(2000)],\n  [i for i in range(10000, 12000)],\n  [[random.random() for _ in range(2)] for _ in range(2000)],\n]\n","const data = Array.from({ length: 2000 }, (v,k) => ({\n  \"book_id\": k,\n  \"word_count\": k+10000,\n  \"book_intro\": Array.from({ length: 2 }, () => Math.random()),\n}));\n","bookIDs := make([]int64, 0, 2000)\nwordCounts := make([]int64, 0, 2000)\nbookIntros := make([][]float32, 0, 2000)\nfor i := 0; i < 2000; i++ {\n    bookIDs = append(bookIDs, int64(i))\n    wordCounts = append(wordCounts, int64(i+10000))\n    v := make([]float32, 0, 2)\n    for j := 0; j < 2; j++ {\n        v = append(v, rand.Float32())\n    }\n    bookIntros = append(bookIntros, v)\n}\nidColumn := entity.NewColumnInt64(\"book_id\", bookIDs)\nwordColumn := entity.NewColumnInt64(\"word_count\", wordCounts)\nintroColumn := entity.NewColumnFloatVector(\"book_intro\", 2, bookIntros)\n","Random ran = new Random();\nList<Long> book_id_array = new ArrayList<>();\nList<Long> word_count_array = new ArrayList<>();\nList<List<Float>> book_intro_array = new ArrayList<>();\nfor (long i = 0L; i < 2000; ++i) {\n    book_id_array.add(i);\n    word_count_array.add(i + 10000);\n    List<Float> vector = new ArrayList<>();\n    for (int k = 0; k < 2; ++k) {\n        vector.add(ran.nextFloat());\n    }\n    book_intro_array.add(vector);\n}\n","# Prepare your data in a CSV file. Milvus CLI only supports importing data from local or remote files.\n","from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\nmr = collection.insert(data)\n","const mr = await milvusClient.dataManager.insert({{\n  collection_name: \"book\",\n  fields_data: data,\n});\n","_, err = milvusClient.Insert(\n    context.Background(), // ctx\n    \"book\",               // CollectionName\n    \"\",                   // partitionName\n    idColumn,             // columnarData\n    wordColumn,           // columnarData\n    introColumn,          // columnarData\n)\nif err != nil {\n    log.Fatal(\"failed to insert data:\", err.Error())\n}\n","List<InsertParam.Field> fields = new ArrayList<>();\nfields.add(new InsertParam.Field(\"book_id\", DataType.Int64, book_id_array));\nfields.add(new InsertParam.Field(\"word_count\", DataType.Int64, word_count_array));\nfields.add(new InsertParam.Field(\"book_intro\", DataType.FloatVector, book_intro_array));\n\nInsertParam insertParam = InsertParam.newBuilder()\n  .withCollectionName(\"book\")\n  .withPartitionName(\"novel\")\n  .withFields(fields)\n  .build();\nmilvusClient.insert(insertParam);\n","import -c book 'https://raw.githubusercontent.com/milvus-io/milvus_cli/main/examples/user_guide/search.csv'\n"],"headingContent":"","anchorList":[{"label":"Insert Data","href":"Insert-Data","type":1,"isActive":false},{"label":"Prepare data","href":"Prepare-data","type":2,"isActive":false},{"label":"Insert data to Milvus","href":"Insert-data-to-Milvus","type":2,"isActive":false},{"label":"Limits","href":"Limits","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}