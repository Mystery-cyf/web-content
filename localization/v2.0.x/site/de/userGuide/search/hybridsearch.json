{"codeList":["from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.load()\n","await milvusClient.collectionManager.loadCollection({\n  collection_name: \"book\",\n});\n","err := milvusClient.LoadCollection(\n  context.Background(),   // ctx\n  \"book\",                 // CollectionName\n  false                   // async\n)\nif err != nil {\n  log.Fatal(\"failed to load collection:\", err.Error())\n}\n","milvusClient.loadCollection(\n  LoadCollectionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build()\n);\n","load -c book\n","search_param = {\n  \"data\": [[0.1, 0.2]],\n  \"anns_field\": \"book_intro\",\n  \"param\": {\"metric_type\": \"L2\", \"params\": {\"nprobe\": 10}},\n  \"limit\": 2,\n  \"expr\": \"word_count <= 11000\",\n}\nres = collection.search(**search_param)\n","const results = await milvusClient.dataManager.search({\n  collection_name: \"book\",\n  expr: \"word_count <= 11000\",\n  vectors: [[0.1, 0.2]],\n  search_params: {\n    anns_field: \"book_intro\",\n    topk: \"2\",\n    metric_type: \"L2\",\n    params: JSON.stringify({ nprobe: 10 }),\n  },\n  vector_type: 101,    // DataType.FloatVector,\n});\n","sp, _ := entity.NewIndexFlatSearchParam(   // NewIndex*SearchParam func\n  10,                                      // searchParam\n)\nsearchResult, err := milvusClient.Search(\n  context.Background(),                    // ctx\n  \"book\",                                  // CollectionName\n  []string{},                              // partitionNames\n  \"word_count <= 11000\",                   // expr\n  []string{\"book_id\"},                     // outputFields\n  []entity.Vector{entity.FloatVector([]float32{0.1, 0.2})}, // vectors\n  \"book_intro\",                            // vectorField\n  entity.L2,                               // metricType\n  2,                                       // topK\n  sp,                                      // sp\n)\nif err != nil {\n  log.Fatal(\"fail to search collection:\", err.Error())\n}\n","final Integer SEARCH_K = 2;\nfinal String SEARCH_PARAM = \"{\\\"nprobe\\\":10}\";\nList<String> search_output_fields = Arrays.asList(\"book_id\");\nList<List<Float>> search_vectors = Arrays.asList(Arrays.asList(0.1f, 0.2f));\n\nSearchParam searchParam = SearchParam.newBuilder()\n  .withCollectionName(\"book\")\n  .withMetricType(MetricType.L2)\n  .withOutFields(search_output_fields)\n  .withTopK(SEARCH_K)\n  .withVectors(search_vectors)\n  .withVectorFieldName(\"book_intro\")\n  .withExpr(\"word_count <= 11000\")\n  .withParams(SEARCH_PARAM)\n  .build();\nR<SearchResults> respSearch = milvusClient.search(searchParam);\n","search\n\nCollection name (book): book\n\nThe vectors of search data(the length of data is number of query (nq), the dim of every vector in data must be equal to vector fieldâ€™s of collection. You can also import a csv file without headers): [[0.1, 0.2]]\n\nThe vector field used to search of collection (book_intro): book_intro\n\nMetric type: L2\n\nSearch parameter nprobe's value: 10\n\nThe max number of returned record, also known as topk: 2\n\nThe boolean expression used to filter attribute []: word_count <= 11000\n\nThe names of partitions to search (split by \",\" if multiple) ['_default'] []: \n\ntimeout []:\n\nGuarantee Timestamp(It instructs Milvus to see all operations performed before a provided timestamp. If no such timestamp is provided, then Milvus will search all operations performed to date) [0]: \n\nTravel Timestamp(Specify a timestamp in a search to get results based on a data view) [0]:\n","assert len(res) == 1\nhits = res[0]\nassert len(hits) == 2\nprint(f\"- Total hits: {len(hits)}, hits ids: {hits.ids} \")\nprint(f\"- Top1 hit id: {hits[0].id}, distance: {hits[0].distance}, score: {hits[0].score} \")\n","console.log(results.results)\n","fmt.Printf(\"%#v\\n\", searchResult)\nfor _, sr := range searchResult {\n  fmt.Println(sr.IDs)\n  fmt.Println(sr.Scores)\n}\n","SearchResultsWrapper wrapperSearch = new SearchResultsWrapper(respSearch.getData().getResults());\nSystem.out.println(wrapperSearch.getIDScore(0));\nSystem.out.println(wrapperSearch.getFieldData(\"book_id\", 0));\n","# Milvus CLI automatically returns the primary key values of the most similar vectors and their distances.\n"],"headingContent":"","anchorList":[{"label":"Conduct a Hybrid Search","href":"Conduct-a-Hybrid-Search","type":1,"isActive":false},{"label":"Load collection","href":"Load-collection","type":2,"isActive":false},{"label":"Conduct a hybrid vector search","href":"Conduct-a-hybrid-vector-search","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}