{"codeList":["variable \"index_count\" {\n  description = \"Amount of index instances to run\"\n  type        = number\n  default     = 5\n}\n","variable \"index_ec2_type\" {\n  description = \"Which server type\"\n  type        = string\n  default     = \"c5.2xlarge\"\n}\n","variable \"key_name\" {\n  description = \"Which aws key to use for access into instances, needs to be uploaded already\"\n  type        = string\n  default     = \"\"\n}\n\nvariable \"my_ip\" {\n  description = \"my_ip for security group. used so that ansible and terraform can ssh in\"\n  type        = string\n  default     = \"x.x.x.x/32\"\n}\n","provider \"aws\" {\n  profile = \"default\"\n  region  = \"us-east-2\"\n}\n","resource \"aws_security_group\" \"cluster_sg\" {\n  name        = \"cluster_sg\"\n  description = \"Allows only me to access\"\n  vpc_id      = aws_vpc.cluster_vpc.id\n\n  ingress {\n    description      = \"All ports from my IP\"\n    from_port        = 0\n    to_port          = 65535\n    protocol         = \"tcp\"\n    cidr_blocks      = [var.my_ip]\n  }\n\n  ingress {\n    description      = \"Full subnet communication\"\n    from_port        = 0\n    to_port          = 65535\n    protocol         = \"all\"\n    self             = true\n  }\n\n  egress {\n    from_port        = 0\n    to_port          = 0\n    protocol         = \"-1\"\n    cidr_blocks      = [\"0.0.0.0/0\"]\n    ipv6_cidr_blocks = [\"::/0\"]\n  }\n\n  tags = {\n    Name = \"cluster_sg\"\n  }\n}\n","resource \"aws_vpc\" \"cluster_vpc\" {\n  cidr_block = \"10.0.0.0/24\"\n  tags = {\n    Name = \"cluster_vpc\"\n  }\n}\n\nresource \"aws_internet_gateway\" \"cluster_gateway\" {\n  vpc_id = aws_vpc.cluster_vpc.id\n\n  tags = {\n    Name = \"cluster_gateway\"\n  }\n}\n","resource \"aws_subnet\" \"cluster_subnet\" {\n  vpc_id                  = aws_vpc.cluster_vpc.id\n  cidr_block              = \"10.0.0.0/24\"\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name = \"cluster_subnet\"\n  }\n}\n\nresource \"aws_route_table\" \"cluster_subnet_gateway_route\" {\n  vpc_id       = aws_vpc.cluster_vpc.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.cluster_gateway.id\n  }\n\n  tags = {\n    Name = \"cluster_subnet_gateway_route\"\n  }\n}\n\nresource \"aws_route_table_association\" \"cluster_subnet_add_gateway\" {\n  subnet_id      = aws_subnet.cluster_subnet.id\n  route_table_id = aws_route_table.cluster_subnet_gateway_route.id\n}\n\n","resource \"aws_instance\" \"minio_node\" {\n  count         = var.minio_count\n  ami           = \"ami-0d8d212151031f51c\"\n  instance_type = var.minio_ec2_type\n  key_name      = var.key_name\n  subnet_id     = aws_subnet.cluster_subnet.id \n  vpc_security_group_ids = [aws_security_group.cluster_sg.id]\n\n  root_block_device {\n    volume_type = \"gp2\"\n    volume_size = 1000\n  }\n  \n  tags = {\n    Name = \"minio-${count.index + 1}\"\n  }\n}\n","- name: All Servers\n  hosts: etcd_ips_public:pulsar_ips_public:minio_ips_public:data_ips_public:index_ips_public:query_ips_public:proxy_ips_public:root_coordinator_ips_public:data_coordinator_ips_public:query_coordinator_ips_public:index_coordinator_ips_public\n  remote_user: ec2-user\n  become: true\n  tags:\n    - start\n  tasks:\n  - name: Install docker\n    ansible.builtin.yum:\n      name: docker\n      state: present\n  - name: Run docker\n    ansible.builtin.service:\n      name: docker\n      state: started\n\n  - name: Install or upgrade docker-compose\n    get_url: \n      url : \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64\"\n      dest: /usr/local/bin/docker-compose\n      mode: 'a+x'\n      force: yes\n  - name: Create symbolic link for docker-compose\n    file:\n      src: \"/usr/local/bin/docker-compose\"\n      dest: \"/usr/bin/docker-compose\"\n      state: link\n \n","- name: etcd\n  hosts: etcd_ips_public\n  remote_user: ec2-user\n  become: true\n  tags:\n    - start\n\n  tasks:\n  - name: Copy etcd config\n    ansible.builtin.template:\n      src: ./yaml_files/etcd.j2\n      dest: /home/ec2-user/docker-compose.yml\n      owner: ec2-user\n      group: wheel\n      mode: '0644'\n\n  - name: Run etcd node\n    shell: docker-compose up -d\n    args:\n      chdir: /home/ec2-user/\n     \n"],"headingContent":"","anchorList":[{"label":"Deploy a Milvus Cluster on EC2","href":"Deploy-a-Milvus-Cluster-on-EC2","type":1,"isActive":false},{"label":"Provision a Milvus cluster","href":"Provision-a-Milvus-cluster","type":2,"isActive":false},{"label":"Start the Milvus cluster","href":"Start-the-Milvus-cluster","type":2,"isActive":false},{"label":"Stop nodes","href":"Stop-nodes","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}