{"codeList":["from pymilvus import Collection\ncollection = Collection(\"book\")      # Get an existing collection.\ncollection.compact()\n","const res = await milvusClient.collectionManager.compact({\n  collection_name: \"book\",\n});\nconst compactionID = res.compactionID;\n","// This function is under active development on the GO client.\n","R<ManualCompactionResponse> response = milvusClient.manualCompaction(\n  ManualCompactionParam.newBuilder()\n    .withCollectionName(\"book\")\n    .build()\n);\nlong compactionID = response.getData().getCompactionID();\n","compact -c book\n","collection.get_compaction_state()\n","const state = await milvusClient.collectionManager.getCompactionState({\n    compactionID\n});\n","// This function is under active development on the GO client.\n","milvusClient.getCompactionState(GetCompactionStateParam.newBuilder()\n  .withCompactionID(compactionID)\n  .build()\n);\n","show compaction_state -c book\n"],"headingContent":"","anchorList":[{"label":"Compact Data","href":"Compact-Data","type":1,"isActive":false},{"label":"Compact data manually","href":"Compact-data-manually","type":2,"isActive":false},{"label":"Check compaction status","href":"Check-compaction-status","type":2,"isActive":false},{"label":"What's next","href":"Whats-next","type":2,"isActive":false}]}